{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive access control middleware system that integrates Dahua face recognition devices with Microsoft Outlook calendar bookings. The system processes face recognition events from Dahua devices, validates user access against Microsoft Graph calendar bookings, and controls door access based on room reservations. It features a React-based dashboard for monitoring access logs, managing user/room mappings, and system configuration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for client-side routing\n- **Styling**: Tailwind CSS with custom CSS variables for theming, dark mode support\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: Microsoft MSAL (Microsoft Authentication Library) for Azure AD integration\n- **API Design**: RESTful endpoints with structured error handling and request logging middleware\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting\n- **Schema**: Drizzle ORM schema definitions with the following core tables:\n  - `users`: System users with authentication\n  - `user_mappings`: Links Dahua user IDs to email addresses\n  - `room_mappings`: Maps door channels to room email addresses\n  - `access_logs`: Records all access attempts with outcomes\n  - `system_health`: Monitors service status and connectivity\n- **Migrations**: Drizzle Kit for database schema management\n\n## Authentication and Authorization\n- **Microsoft Graph Integration**: Uses client credentials flow for service-to-service authentication\n- **Azure Configuration**: Configured with client ID, tenant ID, and client secret\n- **Access Control Logic**: Validates user access by checking calendar bookings in real-time\n\n## External Service Integrations\n- **Dahua Device Integration**: \n  - Receives webhook events from face recognition devices\n  - Supports digest authentication for device API communication\n  - Handles door control operations via REST API\n- **Microsoft Graph API**:\n  - Calendar booking validation\n  - Room availability checking\n  - Auto check-in functionality for valid bookings\n- **Real-time Monitoring**: Dashboard updates with 30-second polling intervals for live data\n\n## Core Workflow\n1. **Event Reception**: Webhook endpoint receives face recognition events from Dahua devices\n2. **User Resolution**: Maps Dahua user ID to email address using stored mappings\n3. **Room Resolution**: Maps door channel to room email address\n4. **Calendar Validation**: Queries Microsoft Graph to verify active booking with user as attendee\n5. **Access Decision**: Grants or denies access based on booking validation\n6. **Door Control**: Sends unlock command to Dahua device for approved access\n7. **Logging**: Records all events with detailed metadata for audit trails\n\n## Development and Testing Features\n- **Test Interface**: Built-in endpoints for simulating webhook events and testing integrations\n- **Health Monitoring**: Real-time system health checks for all external services\n- **Configuration Management**: Environment-based configuration with fallback defaults\n- **Error Handling**: Comprehensive error tracking and user-friendly error messages","size_bytes":3595},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\napp.use(express.raw({ type: 'multipart/x-mixed-replace', limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2174},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { MicrosoftGraphService } from \"./services/microsoft-graph\";\nimport { DahuaService } from \"./services/dahua\";\nimport {\n  insertUserMappingSchema,\n  insertRoomMappingSchema,\n  insertAccessLogSchema,\n  type DahuaEventData,\n  type AccessControlResponse,\n  type TestEvent,\n} from \"@shared/schema\";\n\n// Initialize services\nconst graphService = new MicrosoftGraphService({\n  clientId:\n    process.env.AZURE_CLIENT_ID || \"206217f2-eb5f-46f5-aa7e-f246c2a97ef5\",\n  tenantId:\n    process.env.AZURE_TENANT_ID || \"14a72467-3f25-4572-a535-3d5eddb00cc5\",\n  clientSecret:\n    process.env.AZURE_CLIENT_SECRET ||\n    \"4pT8Q~zhZE_PFKf9nnZCrLNJqqZpYaotFqebTcPu\",\n});\n\n// Configure all Dahua devices for different rooms\nconst dahuaDeviceConfigs = [\n  { host: \"10.255.254.8\", port: 443, roomEmail: \"room1@elrace.com\" },\n  { host: \"10.255.254.9\", port: 443, roomEmail: \"room2@elrace.com\" },\n  { host: \"10.255.254.10\", port: 443, roomEmail: \"room3@elrace.com\" },\n  { host: \"10.255.254.11\", port: 443, roomEmail: \"room4@elrace.com\" },\n];\n\nconst dahuaService = new DahuaService(\n  {\n    host: process.env.DAHUA_HOST || \"10.255.254.8\",\n    port: parseInt(process.env.DAHUA_PORT || \"443\"),\n    username: process.env.DAHUA_USER || \"admin\",\n    password: process.env.DAHUA_PASS || \"P@ssw0rd@247#\",\n  },\n  dahuaDeviceConfigs,\n);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", async (req, res) => {\n    try {\n      const systemHealth = await storage.getSystemHealth();\n      const healthMap = systemHealth.reduce((acc, health) => {\n        acc[health.service] = {\n          status: health.status,\n          lastCheck: health.lastCheck,\n          details: health.details,\n        };\n        return acc;\n      }, {} as any);\n\n      res.json({\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        services: healthMap,\n        environment: {\n          node_env: process.env.NODE_ENV || \"development\",\n          port: process.env.PORT || 5000,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({\n        status: \"unhealthy\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // User mappings endpoints\n  app.get(\"/api/user-mappings\", async (req, res) => {\n    try {\n      const mappings = await storage.getUserMappings();\n      res.json(mappings);\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  app.post(\"/api/user-mappings\", async (req, res) => {\n    try {\n      const validatedData = insertUserMappingSchema.parse(req.body);\n      const mapping = await storage.createUserMapping(validatedData);\n      res.json(mapping);\n    } catch (error) {\n      res\n        .status(400)\n        .json({\n          error: error instanceof Error ? error.message : \"Invalid data\",\n        });\n    }\n  });\n\n  app.delete(\"/api/user-mappings/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteUserMapping(req.params.id);\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"User mapping not found\" });\n      }\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  // Room mappings endpoints\n  app.get(\"/api/room-mappings\", async (req, res) => {\n    try {\n      const mappings = await storage.getRoomMappings();\n      res.json(mappings);\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  app.post(\"/api/room-mappings\", async (req, res) => {\n    try {\n      const validatedData = insertRoomMappingSchema.parse(req.body);\n      const mapping = await storage.createRoomMapping(validatedData);\n      res.json(mapping);\n    } catch (error) {\n      res\n        .status(400)\n        .json({\n          error: error instanceof Error ? error.message : \"Invalid data\",\n        });\n    }\n  });\n\n  app.delete(\"/api/room-mappings/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteRoomMapping(req.params.id);\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"Room mapping not found\" });\n      }\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  // Access logs endpoint\n  app.get(\"/api/access-logs\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getAccessLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  // System health endpoint\n  app.get(\"/api/system-health\", async (req, res) => {\n    try {\n      const health = await storage.getSystemHealth();\n      res.json(health);\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  // Dashboard metrics endpoint\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const logs = await storage.getAccessLogs(1000); // Get more logs for metrics\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const todayLogs = logs.filter(\n        (log) => log.timestamp && new Date(log.timestamp) >= today,\n      );\n\n      const totalAttempts = todayLogs.length;\n      const successfulAccess = todayLogs.filter(\n        (log) => log.accessGranted,\n      ).length;\n      const deniedAccess = totalAttempts - successfulAccess;\n      const successRate =\n        totalAttempts > 0 ? (successfulAccess / totalAttempts) * 100 : 0;\n\n      const roomMappings = await storage.getRoomMappings();\n      const activeRooms = roomMappings.filter((room) => room.isActive).length;\n\n      res.json({\n        totalAttempts,\n        successfulAccess,\n        deniedAccess,\n        successRate: Math.round(successRate * 10) / 10,\n        activeRooms,\n        totalRooms: roomMappings.length,\n      });\n    } catch (error) {\n      res\n        .status(500)\n        .json({\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n    }\n  });\n\n  // Main Dahua webhook endpoint\n  app.post(\"/api/dahua-webhook\", async (req, res) => {\n    try {\n      console.log(`\\n🔔 Dahua webhook event received:`);\n      console.log(\"Headers:\", req.headers);\n      \n      // Handle multipart/compressed data from Dahua\n      let eventData: DahuaEventData;\n      \n      // Check if we received multipart data\n      if (req.headers['content-type']?.includes('multipart')) {\n        // For multipart data, try to extract the JSON payload\n        try {\n          // If body is a Buffer, convert to string and parse\n          if (Buffer.isBuffer(req.body)) {\n            const bodyString = req.body.toString('utf8');\n            // Try to find JSON data in the multipart payload\n            const jsonMatch = bodyString.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n              eventData = JSON.parse(jsonMatch[0]);\n            } else {\n              // Fallback: create basic event data\n              eventData = {\n                code: \"FaceRecognition\",\n                action: \"Start\",\n                index: 1,\n                data: { UserID: \"1\" }\n              };\n            }\n          } else {\n            eventData = req.body || {};\n          }\n        } catch (parseError) {\n          console.log(\"Failed to parse multipart data, using fallback\");\n          eventData = {\n            code: \"FaceRecognition\",\n            action: \"Start\",\n            index: 1,\n            data: { UserID: \"1\" }\n          };\n        }\n      } else {\n        eventData = req.body;\n      }\n      \n      console.log(\"Processed Body:\", eventData);\n      const code = eventData.AlarmType || eventData.code || \"FaceRecognition\";\n      const action = eventData.Action || eventData.action || \"Start\";\n      const index =\n        eventData.ChannelID || eventData.index || eventData.door || 1;\n      const data = eventData.Data || eventData;\n\n      const response: AccessControlResponse = {\n        success: true,\n        accessGranted: false,\n        reason: \"Event processed\",\n        timestamp: new Date().toISOString(),\n      };\n\n      if (\n        action === \"Start\" &&\n        (code === \"FaceRecognition\" || code === \"AccessControl\")\n      ) {\n        console.log(`Code: ${code}, Action: ${action}, Index: ${index}`);\n\n        // Extract user ID and door information\n        const userId =\n          (data as any)?.data?.UserID ||\n          (data as any)?.UserID ||\n          (data as any)?.userId ||\n          (data as any)?.PersonID ||\n          index.toString();\n        const door =\n          (data as any)?.Door ||\n          (data as any)?.door ||\n          (data as any)?.ChannelID ||\n          index;\n\n        console.log(`Extracted - UserID: ${userId}, Door: ${door}`);\n\n        // Look up user and room mappings\n        const userMapping = await storage.getUserMapping(userId);\n        const roomMapping = await storage.getRoomMapping(door);\n\n        if (!userMapping) {\n          console.log(`⚠️ User ID ${userId} not mapped to any email address`);\n          response.reason = \"User not mapped\";\n\n          await storage.createAccessLog({\n            dahuaUserId: userId,\n            doorChannel: door,\n            eventType: code,\n            accessGranted: false,\n            reason: \"user-not-mapped\",\n            metadata: { eventData },\n          });\n\n          return res.json(response);\n        }\n\n        if (!roomMapping) {\n          console.log(`⚠️ Door ${door} not mapped to any room email`);\n          response.reason = \"Room not mapped\";\n\n          await storage.createAccessLog({\n            dahuaUserId: userId,\n            userEmail: userMapping.email,\n            doorChannel: door,\n            eventType: code,\n            accessGranted: false,\n            reason: \"room-not-mapped\",\n            metadata: { eventData },\n          });\n\n          return res.json(response);\n        }\n\n        // Check for active meeting where user is authorized\n        const activeMeeting = await graphService.checkActiveMeeting(\n          userMapping.email,\n          roomMapping.roomEmail,\n        );\n\n        response.userEmail = userMapping.email;\n        response.roomEmail = roomMapping.roomEmail;\n\n        if (activeMeeting.hasActiveMeeting) {\n          // User has active meeting - keep door open during meeting time\n          const doorResult = await dahuaService.openDoor(\n            door,\n            roomMapping.roomEmail,\n          );\n\n          response.accessGranted = true;\n          response.reason = `Active meeting access - door open until ${activeMeeting.meetingEnd}`;\n          response.eventId = activeMeeting.eventId;\n          response.meetingDetails = activeMeeting;\n\n          console.log(\n            `✅ Meeting access granted for ${userMapping.email} - ${activeMeeting.meetingSubject} until ${activeMeeting.meetingEnd}`,\n          );\n\n          await storage.createAccessLog({\n            dahuaUserId: userId,\n            userEmail: userMapping.email,\n            doorChannel: door,\n            roomEmail: roomMapping.roomEmail,\n            eventType: code,\n            accessGranted: true,\n            reason: \"active-meeting-access\",\n            eventId: activeMeeting.eventId,\n            metadata: { eventData, activeMeeting, doorResult },\n          });\n        } else {\n          // No active meeting for this user - deny access (even if they're registered in Dahua)\n          response.accessGranted = false;\n          response.reason = `No active meeting found for ${userMapping.email} in ${roomMapping.roomEmail}`;\n\n          console.log(\n            `❌ Meeting access denied for ${userMapping.email} - no active meeting in ${roomMapping.roomEmail}`,\n          );\n\n          await storage.createAccessLog({\n            dahuaUserId: userId,\n            userEmail: userMapping.email,\n            doorChannel: door,\n            roomEmail: roomMapping.roomEmail,\n            eventType: code,\n            accessGranted: false,\n            reason: \"no-active-meeting\",\n            metadata: { eventData, activeMeeting },\n          });\n        }\n\n        console.log(`📊 Result:`, response);\n        console.log(`=== End processing ===\\n`);\n      }\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error processing Dahua webhook:\", error);\n      const errorResponse: AccessControlResponse = {\n        success: false,\n        accessGranted: false,\n        reason: `Error: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        timestamp: new Date().toISOString(),\n      };\n      res.status(500).json(errorResponse);\n    }\n  });\n\n  // Test endpoints\n  app.post(\"/api/test/event\", async (req, res) => {\n    try {\n      const {\n        code = \"FaceRecognition\",\n        action = \"Start\",\n        index = 1,\n        data = {},\n      } = req.body as TestEvent;\n\n      console.log(\"📧 Manual test event received:\", {\n        code,\n        action,\n        index,\n        data,\n      });\n\n      // Simulate the webhook call internally\n      const simulatedEvent: DahuaEventData = {\n        AlarmType: code,\n        Action: action,\n        ChannelID: index,\n        Data: data,\n      };\n\n      // Process the same way as webhook\n      if (\n        action === \"Start\" &&\n        (code === \"FaceRecognition\" || code === \"AccessControl\")\n      ) {\n        const userId = data?.UserID || index.toString();\n        const door = data?.Door || index;\n\n        const userMapping = await storage.getUserMapping(userId);\n        const roomMapping = await storage.getRoomMapping(door);\n\n        if (!userMapping || !roomMapping) {\n          return res.json({\n            success: false,\n            error: \"User or room not mapped\",\n            userMapping: userMapping ? \"found\" : \"not found\",\n            roomMapping: roomMapping ? \"found\" : \"not found\",\n          });\n        }\n\n        const activeMeeting = await graphService.checkActiveMeeting(\n          userMapping.email,\n          roomMapping.roomEmail,\n        );\n\n        res.json({\n          success: true,\n          message: \"Test event processed successfully\",\n          event: { code, action, index, data },\n          result: {\n            userEmail: userMapping.email,\n            roomEmail: roomMapping.roomEmail,\n            activeMeeting,\n          },\n        });\n      } else {\n        res.json({\n          success: true,\n          message:\n            \"Test event received but ignored (not a face recognition start event)\",\n          event: { code, action, index, data },\n        });\n      }\n    } catch (error) {\n      console.error(\"Error in test endpoint:\", error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.post(\"/api/test/calendar\", async (req, res) => {\n    try {\n      const { userEmail = \"aziz@elrace.com\", roomEmail = \"Room1@elrace.com\" } =\n        req.body;\n\n      console.log(\"📅 Direct calendar test requested:\", {\n        userEmail,\n        roomEmail,\n      });\n\n      const result = await graphService.checkActiveMeeting(\n        userEmail,\n        roomEmail,\n      );\n\n      res.json({\n        success: true,\n        result: result,\n      });\n    } catch (error) {\n      console.error(\"Error in calendar test:\", error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.post(\"/api/test/connection\", async (req, res) => {\n    try {\n      console.log(\"🧪 Testing Microsoft Graph API connection...\");\n\n      const [dahuaTest, graphTest] = await Promise.all([\n        dahuaService.testConnection(),\n        graphService.testConnection(),\n      ]);\n\n      console.log(\"📊 Microsoft Graph API Response:\", {\n        success: graphTest.success,\n        message: graphTest.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Update system health\n      await storage.updateSystemHealth(\n        \"dahua\",\n        dahuaTest.success ? \"online\" : \"offline\",\n        dahuaTest.message,\n      );\n      await storage.updateSystemHealth(\n        \"microsoft-graph\",\n        graphTest.success ? \"online\" : \"offline\",\n        graphTest.message,\n      );\n      await storage.updateSystemHealth(\n        \"server\",\n        \"online\",\n        \"Server operational\",\n      );\n\n      res.json({\n        success: dahuaTest.success && graphTest.success,\n        results: {\n          dahua: dahuaTest,\n          microsoftGraph: graphTest,\n          server: { success: true, message: \"Server healthy\" },\n        },\n      });\n    } catch (error) {\n      console.error(\"❌ Connection test failed:\", error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.post(\"/api/test/door\", async (req, res) => {\n    try {\n      const { channel, action = \"open\", roomEmail } = req.body;\n\n      let result;\n      if (action === \"open\") {\n        result = await dahuaService.openDoor(channel, roomEmail);\n      } else if (action === \"close\") {\n        result = await dahuaService.closeDoor(channel, roomEmail);\n      } else if (action === \"status\") {\n        result = await dahuaService.getDoorStatus(channel, roomEmail);\n      } else {\n        return res\n          .status(400)\n          .json({ error: \"Invalid action. Use: open, close, or status\" });\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Test all device connections\n  app.post(\"/api/test/all-devices\", async (req, res) => {\n    try {\n      console.log(\"🧪 Testing all Dahua device connections...\");\n\n      const result = await dahuaService.testAllDevices();\n\n      res.json({\n        success: result.success,\n        message: result.message,\n        devices: result.deviceResults,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"❌ All devices test failed:\", error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Advanced Dahua operations endpoint\n  app.post(\"/api/test/dahua-advanced\", async (req, res) => {\n    try {\n      const { action, userId, threshold, startTime, endTime, count } = req.body;\n\n      let result;\n      switch (action) {\n        case \"records\":\n          result = await dahuaService.getUnlockRecords(\n            startTime,\n            endTime,\n            count,\n          );\n          break;\n        case \"capture\":\n          if (!userId) {\n            return res\n              .status(400)\n              .json({ error: \"userId required for capture action\" });\n          }\n          result = await dahuaService.captureFaceForUser(userId);\n          break;\n        case \"threshold\":\n          result = await dahuaService.setFaceRecognitionThreshold(\n            threshold || 90,\n          );\n          break;\n        case \"liveness\":\n          result = await dahuaService.enableLivenessDetection();\n          break;\n        default:\n          return res\n            .status(400)\n            .json({\n              error:\n                \"Invalid action. Use: records, capture, threshold, or liveness\",\n            });\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Enhanced device information endpoint\n  app.get(\"/api/test/device-info/:roomEmail?\", async (req, res) => {\n    try {\n      const { roomEmail } = req.params;\n      console.log(\n        `🔍 Getting device information for room: ${roomEmail || \"default\"}`,\n      );\n\n      let deviceHost, devicePort;\n      if (roomEmail) {\n        const deviceConfig = dahuaService.getDeviceByRoom(roomEmail);\n        if (deviceConfig) {\n          deviceHost = deviceConfig.host;\n          devicePort = deviceConfig.port;\n        }\n      }\n\n      const result = await dahuaService.getDeviceInfo(deviceHost, devicePort);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error getting device info:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error getting device info\",\n      });\n    }\n  });\n\n  // User management endpoints\n  app.post(\"/api/test/add-user\", async (req, res) => {\n    try {\n      const { userID, userName, doors, validFrom, validTo } = req.body;\n      console.log(`👤 Adding user ${userName} with ID ${userID}...`);\n\n      const result = await dahuaService.addUser({\n        userID,\n        userName,\n        doors,\n        validFrom,\n        validTo,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error adding user\",\n      });\n    }\n  });\n\n  // User search endpoint\n  app.get(\"/api/test/search-users\", async (req, res) => {\n    try {\n      const { userID, userName } = req.query;\n      console.log(\"🔍 Searching for users...\");\n\n      const result = await dahuaService.searchUsers(\n        userID as string,\n        userName as string,\n      );\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error searching users:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error searching users\",\n      });\n    }\n  });\n\n  // Enhanced door control with duration\n  app.post(\"/api/test/door-control-enhanced\", async (req, res) => {\n    try {\n      const { action, channel, roomEmail, duration } = req.body;\n      console.log(\n        `🚪 ${action} door ${channel} for room ${roomEmail}${duration ? ` for ${duration}s` : \"\"}...`,\n      );\n\n      let result;\n      if (action === \"open\") {\n        result = await dahuaService.openDoor(channel, roomEmail, duration);\n      } else if (action === \"close\") {\n        result = await dahuaService.closeDoor(channel, roomEmail);\n      } else if (action === \"status\") {\n        result = await dahuaService.getDoorStatus(channel, roomEmail);\n      } else {\n        return res.status(400).json({\n          success: false,\n          message: \"Invalid action. Use: open, close, or status\",\n        });\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error controlling door:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error controlling door\",\n      });\n    }\n  });\n\n  // Access control configuration endpoint\n  app.get(\"/api/test/config\", async (req, res) => {\n    try {\n      console.log(\"⚙️ Getting access control configuration...\");\n\n      const result = await dahuaService.getAccessControlConfig();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error getting configuration:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Internal server error getting configuration\",\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23833},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type UserMapping,\n  type InsertUserMapping,\n  type RoomMapping,\n  type InsertRoomMapping,\n  type AccessLog,\n  type InsertAccessLog,\n  type SystemHealth,\n  type InsertSystemHealth\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // User mapping operations\n  getUserMappings(): Promise<UserMapping[]>;\n  getUserMapping(dahuaUserId: string): Promise<UserMapping | undefined>;\n  createUserMapping(mapping: InsertUserMapping): Promise<UserMapping>;\n  deleteUserMapping(id: string): Promise<boolean>;\n\n  // Room mapping operations\n  getRoomMappings(): Promise<RoomMapping[]>;\n  getRoomMapping(doorChannel: number): Promise<RoomMapping | undefined>;\n  createRoomMapping(mapping: InsertRoomMapping): Promise<RoomMapping>;\n  deleteRoomMapping(id: string): Promise<boolean>;\n\n  // Access log operations\n  getAccessLogs(limit?: number): Promise<AccessLog[]>;\n  createAccessLog(log: InsertAccessLog): Promise<AccessLog>;\n\n  // System health operations\n  getSystemHealth(): Promise<SystemHealth[]>;\n  updateSystemHealth(service: string, status: string, details?: string): Promise<SystemHealth>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private userMappings: Map<string, UserMapping>;\n  private roomMappings: Map<string, RoomMapping>;\n  private accessLogs: AccessLog[];\n  private systemHealth: Map<string, SystemHealth>;\n\n  constructor() {\n    this.users = new Map();\n    this.userMappings = new Map();\n    this.roomMappings = new Map();\n    this.accessLogs = [];\n    this.systemHealth = new Map();\n\n    // Initialize with default data\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Default user mapping - based on your requirements\n    const defaultUserMapping: UserMapping = {\n      id: randomUUID(),\n      dahuaUserId: \"2689\",\n      email: \"aziz@elrace.com\", \n      name: \"Aziz\",\n      createdAt: new Date(),\n      isActive: true,\n    };\n    this.userMappings.set(defaultUserMapping.id, defaultUserMapping);\n\n    // Default room mappings - matching device configuration\n    const defaultRooms = [\n      { doorChannel: 1, roomEmail: \"room1@elrace.com\", roomName: \"Conference Room 1\" },\n      { doorChannel: 2, roomEmail: \"room2@elrace.com\", roomName: \"Conference Room 2\" },\n      { doorChannel: 3, roomEmail: \"room3@elrace.com\", roomName: \"Conference Room 3\" },\n      { doorChannel: 4, roomEmail: \"room4@elrace.com\", roomName: \"Conference Room 4\" },\n    ];\n\n    defaultRooms.forEach(room => {\n      const roomMapping: RoomMapping = {\n        id: randomUUID(),\n        doorChannel: room.doorChannel,\n        roomEmail: room.roomEmail,\n        roomName: room.roomName,\n        createdAt: new Date(),\n        isActive: true,\n      };\n      this.roomMappings.set(roomMapping.id, roomMapping);\n    });\n\n    // Default system health\n    const services = ['dahua', 'microsoft-graph', 'server'];\n    services.forEach(service => {\n      const health: SystemHealth = {\n        id: randomUUID(),\n        service,\n        status: 'online',\n        lastCheck: new Date(),\n        details: 'Service operational',\n      };\n      this.systemHealth.set(service, health);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getUserMappings(): Promise<UserMapping[]> {\n    return Array.from(this.userMappings.values()).filter(mapping => mapping.isActive);\n  }\n\n  async getUserMapping(dahuaUserId: string): Promise<UserMapping | undefined> {\n    return Array.from(this.userMappings.values()).find(\n      mapping => mapping.dahuaUserId === dahuaUserId && mapping.isActive\n    );\n  }\n\n  async createUserMapping(mapping: InsertUserMapping): Promise<UserMapping> {\n    const id = randomUUID();\n    const userMapping: UserMapping = {\n      ...mapping,\n      id,\n      createdAt: new Date(),\n    };\n    this.userMappings.set(id, userMapping);\n    return userMapping;\n  }\n\n  async deleteUserMapping(id: string): Promise<boolean> {\n    const mapping = this.userMappings.get(id);\n    if (mapping) {\n      mapping.isActive = false;\n      return true;\n    }\n    return false;\n  }\n\n  async getRoomMappings(): Promise<RoomMapping[]> {\n    return Array.from(this.roomMappings.values()).filter(mapping => mapping.isActive);\n  }\n\n  async getRoomMapping(doorChannel: number): Promise<RoomMapping | undefined> {\n    return Array.from(this.roomMappings.values()).find(\n      mapping => mapping.doorChannel === doorChannel && mapping.isActive\n    );\n  }\n\n  async createRoomMapping(mapping: InsertRoomMapping): Promise<RoomMapping> {\n    const id = randomUUID();\n    const roomMapping: RoomMapping = {\n      ...mapping,\n      id,\n      createdAt: new Date(),\n    };\n    this.roomMappings.set(id, roomMapping);\n    return roomMapping;\n  }\n\n  async deleteRoomMapping(id: string): Promise<boolean> {\n    const mapping = this.roomMappings.get(id);\n    if (mapping) {\n      mapping.isActive = false;\n      return true;\n    }\n    return false;\n  }\n\n  async getAccessLogs(limit: number = 50): Promise<AccessLog[]> {\n    return this.accessLogs\n      .sort((a, b) => new Date(b.timestamp!).getTime() - new Date(a.timestamp!).getTime())\n      .slice(0, limit);\n  }\n\n  async createAccessLog(log: InsertAccessLog): Promise<AccessLog> {\n    const id = randomUUID();\n    const accessLog: AccessLog = {\n      ...log,\n      id,\n      timestamp: new Date(),\n    };\n    this.accessLogs.push(accessLog);\n    return accessLog;\n  }\n\n  async getSystemHealth(): Promise<SystemHealth[]> {\n    return Array.from(this.systemHealth.values());\n  }\n\n  async updateSystemHealth(service: string, status: string, details?: string): Promise<SystemHealth> {\n    let health = this.systemHealth.get(service);\n    if (!health) {\n      health = {\n        id: randomUUID(),\n        service,\n        status,\n        lastCheck: new Date(),\n        details: details || '',\n      };\n    } else {\n      health.status = status;\n      health.lastCheck = new Date();\n      health.details = details || health.details;\n    }\n    this.systemHealth.set(service, health);\n    return health;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6716},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const userMappings = pgTable(\"user_mappings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  dahuaUserId: text(\"dahua_user_id\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  name: text(\"name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const roomMappings = pgTable(\"room_mappings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  doorChannel: integer(\"door_channel\").notNull().unique(),\n  roomEmail: text(\"room_email\").notNull(),\n  roomName: text(\"room_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const accessLogs = pgTable(\"access_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  dahuaUserId: text(\"dahua_user_id\"),\n  userEmail: text(\"user_email\"),\n  doorChannel: integer(\"door_channel\"),\n  roomEmail: text(\"room_email\"),\n  eventType: text(\"event_type\").notNull(), // 'FaceRecognition', 'AccessControl'\n  accessGranted: boolean(\"access_granted\").notNull(),\n  reason: text(\"reason\"), // 'valid-booking', 'no-booking', 'unauthorized', 'error'\n  eventId: text(\"event_id\"), // Microsoft Graph event ID if booking found\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  metadata: jsonb(\"metadata\"), // Store additional event data\n});\n\nexport const systemHealth = pgTable(\"system_health\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  service: text(\"service\").notNull(), // 'dahua', 'microsoft-graph', 'server'\n  status: text(\"status\").notNull(), // 'online', 'offline', 'warning'\n  lastCheck: timestamp(\"last_check\").defaultNow(),\n  details: text(\"details\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertUserMappingSchema = createInsertSchema(userMappings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoomMappingSchema = createInsertSchema(roomMappings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAccessLogSchema = createInsertSchema(accessLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertSystemHealthSchema = createInsertSchema(systemHealth).omit({\n  id: true,\n  lastCheck: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UserMapping = typeof userMappings.$inferSelect;\nexport type InsertUserMapping = z.infer<typeof insertUserMappingSchema>;\n\nexport type RoomMapping = typeof roomMappings.$inferSelect;\nexport type InsertRoomMapping = z.infer<typeof insertRoomMappingSchema>;\n\nexport type AccessLog = typeof accessLogs.$inferSelect;\nexport type InsertAccessLog = z.infer<typeof insertAccessLogSchema>;\n\nexport type SystemHealth = typeof systemHealth.$inferSelect;\nexport type InsertSystemHealth = z.infer<typeof insertSystemHealthSchema>;\n\n// API Response Types\nexport type AccessControlResponse = {\n  success: boolean;\n  accessGranted: boolean;\n  reason: string;\n  eventId?: string;\n  timestamp: string;\n  userEmail?: string;\n  roomEmail?: string;\n  meetingDetails?: any;\n};\n\nexport type DahuaEventData = {\n  AlarmType?: string;\n  code?: string;\n  Action?: string;\n  action?: string;\n  ChannelID?: number;\n  index?: number;\n  door?: number;\n  Data?: {\n    UserID?: string;\n    userId?: string;\n    PersonID?: string;\n    Door?: number;\n    door?: number;\n    ChannelID?: number;\n  };\n};\n\nexport type TestEvent = {\n  code: string;\n  action: string;\n  index: number;\n  data: {\n    UserID?: string;\n    Door?: number;\n  };\n};\n","size_bytes":4040},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AccessLogs from \"@/pages/access-logs\";\nimport UserMappings from \"@/pages/user-mappings\";\nimport RoomMappings from \"@/pages/room-mappings\";\nimport Configuration from \"@/pages/configuration\";\nimport TestEndpoints from \"@/pages/test-endpoints\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"flex h-screen bg-background text-foreground\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/access-logs\" component={AccessLogs} />\n          <Route path=\"/user-mappings\" component={UserMappings} />\n          <Route path=\"/room-mappings\" component={RoomMappings} />\n          <Route path=\"/configuration\" component={Configuration} />\n          <Route path=\"/test-endpoints\" component={TestEndpoints} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <div className=\"dark\">\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1581},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 7%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 10%, 11%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 10%, 11%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(210, 98%, 48%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(180, 65%, 35%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 73%, 41%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --ring: hsl(210, 98%, 48%);\n  --chart-1: hsl(210, 98%, 48%);\n  --chart-2: hsl(180, 65%, 35%);\n  --chart-3: hsl(47, 96%, 53%);\n  --chart-4: hsl(0, 73%, 41%);\n  --chart-5: hsl(142, 69%, 58%);\n  --radius: 0.5rem;\n  --font-sans: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --sidebar: hsl(240, 10%, 11%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(210, 98%, 48%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(180, 65%, 35%);\n  --sidebar-accent-foreground: hsl(0, 0%, 95%);\n  --sidebar-border: hsl(240, 4%, 16%);\n  --sidebar-ring: hsl(210, 98%, 48%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 7%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 10%, 11%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 10%, 11%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(210, 98%, 48%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(180, 65%, 35%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 73%, 41%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --ring: hsl(210, 98%, 48%);\n  --chart-1: hsl(210, 98%, 48%);\n  --chart-2: hsl(180, 65%, 35%);\n  --chart-3: hsl(47, 96%, 53%);\n  --chart-4: hsl(0, 73%, 41%);\n  --chart-5: hsl(142, 69%, 58%);\n  --sidebar: hsl(240, 10%, 11%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(210, 98%, 48%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(180, 65%, 35%);\n  --sidebar-accent-foreground: hsl(0, 0%, 95%);\n  --sidebar-border: hsl(240, 4%, 16%);\n  --sidebar-ring: hsl(210, 98%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .status-indicator {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 8px;\n  }\n\n  .status-online { \n    background-color: #4caf50; \n  }\n  \n  .status-offline { \n    background-color: #f44336; \n  }\n  \n  .status-warning { \n    background-color: #ff9800; \n  }\n\n  .card-hover:hover {\n    transform: translateY(-2px);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  .pulse-animation {\n    animation: pulse 2s infinite;\n  }\n\n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n  }\n\n  .gradient-border {\n    background: linear-gradient(45deg, hsl(var(--primary)), hsl(var(--accent)));\n    padding: 1px;\n    border-radius: calc(var(--radius) + 1px);\n  }\n\n  .gradient-border > div {\n    background: hsl(var(--card));\n    border-radius: var(--radius);\n  }\n}\n","size_bytes":3699},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/dahua.ts":{"content":"import crypto from 'crypto';\n\ninterface DahuaConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n}\n\ninterface DahuaDeviceConfig {\n  host: string;\n  port?: number;\n  username?: string;\n  password?: string;\n  roomEmail: string;\n}\n\ninterface DoorControlResult {\n  success: boolean;\n  message: string;\n  action?: string;\n}\n\nexport class DahuaService {\n  private config: DahuaConfig;\n  private devices: Map<string, DahuaDeviceConfig>; // Map room email to device config\n\n  constructor(config: DahuaConfig, deviceConfigs: DahuaDeviceConfig[] = []) {\n    this.config = config;\n    this.devices = new Map();\n    \n    // Set up device mappings\n    deviceConfigs.forEach(device => {\n      this.devices.set(device.roomEmail, device);\n    });\n  }\n\n  // Helper method to get device configuration by room email\n  getDeviceByRoom(roomEmail: string): DahuaDeviceConfig | undefined {\n    return this.devices.get(roomEmail);\n  }\n\n  private generateDigestAuth(username: string, password: string, realm: string, uri: string, nonce: string, method: string = 'GET', qop?: string, nc?: string, cnonce?: string): string {\n    const ha1 = crypto.createHash('md5').update(`${username}:${realm}:${password}`).digest('hex');\n    const ha2 = crypto.createHash('md5').update(`${method}:${uri}`).digest('hex');\n    \n    let response: string;\n    let authString = `Digest username=\"${username}\", realm=\"${realm}\", nonce=\"${nonce}\", uri=\"${uri}\"`;\n    \n    if (qop) {\n      // RFC 2617 with qop\n      const responseHash = crypto.createHash('md5').update(`${ha1}:${nonce}:${nc}:${cnonce}:${qop}:${ha2}`).digest('hex');\n      response = responseHash;\n      authString += `, qop=${qop}, nc=${nc}, cnonce=\"${cnonce}\", response=\"${response}\"`;\n    } else {\n      // RFC 2069 basic digest\n      response = crypto.createHash('md5').update(`${ha1}:${nonce}:${ha2}`).digest('hex');\n      authString += `, response=\"${response}\"`;\n    }\n    \n    return authString;\n  }\n\n  private async makeRequest(path: string, method: string = 'GET', deviceHost?: string, devicePort?: number, body?: string, contentType?: string): Promise<any> {\n    const host = deviceHost || this.config.host;\n    const port = devicePort || this.config.port;\n    const protocol = port === 443 ? 'https' : 'http';\n    const url = `${protocol}://${host}:${port}${path}`;\n    \n    try {\n      const headers: Record<string, string> = {\n        'User-Agent': 'Dahua/3.0'\n      };\n      \n      if (contentType) {\n        headers['Content-Type'] = contentType;\n      }\n      \n      // First request to get authentication challenge\n      const fetchOptions: any = {\n        method,\n        headers: body ? headers : undefined,\n        body\n      };\n      \n      // Handle HTTPS with self-signed certificates\n      if (protocol === 'https') {\n        const { Agent } = await import('https');\n        fetchOptions.agent = new Agent({\n          rejectUnauthorized: false\n        });\n      }\n      \n      const initialResponse = await fetch(url, fetchOptions);\n      \n      if (initialResponse.status === 401) {\n        const wwwAuth = initialResponse.headers.get('WWW-Authenticate');\n        if (wwwAuth && wwwAuth.includes('Digest')) {\n          // Parse digest challenge with enhanced parsing\n          const realm = wwwAuth.match(/realm=\"([^\"]+)\"/)?.[1] || '';\n          const nonce = wwwAuth.match(/nonce=\"([^\"]+)\"/)?.[1] || '';\n          const qop = wwwAuth.match(/qop=\"([^\"]+)\"/)?.[1];\n          const opaque = wwwAuth.match(/opaque=\"([^\"]+)\"/)?.[1];\n          \n          let authHeader: string;\n          \n          if (qop) {\n            // Enhanced auth with qop\n            const nc = '00000001';\n            const cnonce = crypto.randomBytes(8).toString('hex');\n            authHeader = this.generateDigestAuth(\n              this.config.username,\n              this.config.password,\n              realm,\n              path,\n              nonce,\n              method,\n              qop,\n              nc,\n              cnonce\n            );\n            \n            if (opaque) {\n              authHeader += `, opaque=\"${opaque}\"`;\n            }\n          } else {\n            // Basic digest auth\n            authHeader = this.generateDigestAuth(\n              this.config.username,\n              this.config.password,\n              realm,\n              path,\n              nonce,\n              method\n            );\n          }\n          \n          // Retry with authentication\n          const authFetchOptions: any = {\n            method,\n            headers: {\n              ...headers,\n              'Authorization': authHeader\n            },\n            body\n          };\n          \n          // Handle HTTPS with self-signed certificates\n          if (protocol === 'https') {\n            const { Agent } = await import('https');\n            authFetchOptions.agent = new Agent({\n              rejectUnauthorized: false\n            });\n          }\n          \n          const authResponse = await fetch(url, authFetchOptions);\n          \n          if (authResponse.ok) {\n            const text = await authResponse.text();\n            return { success: true, data: text, status: authResponse.status };\n          } else {\n            const errorText = await authResponse.text().catch(() => 'Unknown error');\n            return { success: false, error: `HTTP ${authResponse.status}: ${authResponse.statusText}`, details: errorText };\n          }\n        }\n      } else if (initialResponse.ok) {\n        const text = await initialResponse.text();\n        return { success: true, data: text, status: initialResponse.status };\n      }\n      \n      const errorText = await initialResponse.text().catch(() => 'Unknown error');\n      return { success: false, error: `HTTP ${initialResponse.status}: ${initialResponse.statusText}`, details: errorText };\n    } catch (error) {\n      return { success: false, error: `Network error: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n  }\n\n  async openDoor(channel: number, roomEmail?: string, duration?: number): Promise<DoorControlResult> {\n    console.log(`Attempting to open door on channel ${channel} for room ${roomEmail || 'default'}`);\n    \n    let deviceHost, devicePort;\n    if (roomEmail && this.devices.has(roomEmail)) {\n      const device = this.devices.get(roomEmail)!;\n      deviceHost = device.host;\n      devicePort = device.port;\n      console.log(`Using device ${deviceHost}:${devicePort} for room ${roomEmail}`);\n    }\n    \n    // Enhanced door control with optional duration parameter\n    let endpoint = `/cgi-bin/accessControl.cgi?action=openDoor&channel=${channel}&Type=Remote`;\n    if (duration) {\n      endpoint += `&time=${duration}`; // Duration in seconds\n    }\n    \n    const result = await this.makeRequest(endpoint, 'GET', deviceHost, devicePort);\n    \n    if (result.success) {\n      // Parse response for enhanced feedback\n      const isSuccess = result.data.includes('OK') || result.data.includes('success') || result.status === 200;\n      \n      if (isSuccess) {\n        console.log(`✓ Door ${channel} opened successfully on ${deviceHost || this.config.host}`);\n        return {\n          success: true,\n          message: `Door ${channel} opened successfully${duration ? ` for ${duration} seconds` : ''}`,\n          action: 'open'\n        };\n      } else {\n        console.error(`Door ${channel} operation returned unexpected response:`, result.data);\n        return {\n          success: false,\n          message: `Door ${channel} command sent but response unclear: ${result.data}`\n        };\n      }\n    } else {\n      console.error(`Failed to open door ${channel}:`, result.error);\n      return {\n        success: false,\n        message: `Failed to open door ${channel}: ${result.error}`\n      };\n    }\n  }\n\n  async closeDoor(channel: number, roomEmail?: string): Promise<DoorControlResult> {\n    console.log(`Attempting to close door on channel ${channel} for room ${roomEmail || 'default'}`);\n    \n    let deviceHost, devicePort;\n    if (roomEmail && this.devices.has(roomEmail)) {\n      const device = this.devices.get(roomEmail)!;\n      deviceHost = device.host;\n      devicePort = device.port;\n      console.log(`Using device ${deviceHost}:${devicePort} for room ${roomEmail}`);\n    }\n    \n    const result = await this.makeRequest(\n      `/cgi-bin/accessControl.cgi?action=closeDoor&channel=${channel}&Type=Remote`,\n      'GET',\n      deviceHost,\n      devicePort\n    );\n    \n    if (result.success) {\n      const isSuccess = result.data.includes('OK') || result.data.includes('success') || result.status === 200;\n      \n      if (isSuccess) {\n        console.log(`✓ Door ${channel} closed successfully on ${deviceHost || this.config.host}`);\n        return {\n          success: true,\n          message: `Door ${channel} closed successfully`,\n          action: 'close'\n        };\n      } else {\n        console.error(`Door ${channel} close operation returned unexpected response:`, result.data);\n        return {\n          success: false,\n          message: `Door ${channel} close command sent but response unclear: ${result.data}`\n        };\n      }\n    } else {\n      console.error(`Failed to close door ${channel}:`, result.error);\n      return {\n        success: false,\n        message: `Failed to close door ${channel}: ${result.error}`\n      };\n    }\n  }\n\n  async getDoorStatus(channel: number, roomEmail?: string): Promise<DoorControlResult> {\n    console.log(`Checking door status for channel ${channel} for room ${roomEmail || 'default'}`);\n    \n    let deviceHost, devicePort;\n    if (roomEmail && this.devices.has(roomEmail)) {\n      const device = this.devices.get(roomEmail)!;\n      deviceHost = device.host;\n      devicePort = device.port;\n      console.log(`Using device ${deviceHost}:${devicePort} for room ${roomEmail}`);\n    }\n    \n    const result = await this.makeRequest(\n      `/cgi-bin/accessControl.cgi?action=getDoorStatus&channel=${channel}`,\n      'GET',\n      deviceHost,\n      devicePort\n    );\n    \n    if (result.success) {\n      console.log(`✓ Door ${channel} status retrieved successfully from ${deviceHost || this.config.host}`);\n      return {\n        success: true,\n        message: `Door ${channel} status: ${result.data}`,\n        action: 'status'\n      };\n    } else {\n      console.error(`Failed to get door ${channel} status:`, result.error);\n      return {\n        success: false,\n        message: `Failed to get door ${channel} status: ${result.error}`\n      };\n    }\n  }\n\n  async getUnlockRecords(startTime?: string, endTime?: string, count: number = 100): Promise<DoorControlResult & { records?: any[] }> {\n    console.log('Retrieving unlock records from Dahua device');\n    \n    // Enhanced record retrieval with time filtering\n    let endpoint = '/cgi-bin/recordFinder.cgi?action=find&name=AccessControlCardRec';\n    \n    if (startTime) {\n      endpoint += `&StartTime=${encodeURIComponent(startTime)}`;\n    }\n    if (endTime) {\n      endpoint += `&EndTime=${encodeURIComponent(endTime)}`;\n    }\n    endpoint += `&count=${count}`;\n    \n    const result = await this.makeRequest(endpoint);\n    \n    if (result.success) {\n      console.log('✓ Unlock records retrieved successfully');\n      \n      // Parse response data into structured format\n      const records = this.parseUnlockRecords(result.data);\n      \n      return {\n        success: true,\n        message: `Retrieved ${records.length} unlock records`,\n        action: 'records',\n        records\n      };\n    } else {\n      console.error('Failed to get unlock records:', result.error);\n      return {\n        success: false,\n        message: `Failed to get unlock records: ${result.error}`\n      };\n    }\n  }\n\n  private parseUnlockRecords(data: string): any[] {\n    const records: any[] = [];\n    \n    try {\n      // Parse Dahua response format\n      const lines = data.split('\\n');\n      let currentRecord: any = {};\n      \n      for (const line of lines) {\n        if (line.startsWith('records[')) {\n          const match = line.match(/records\\[(\\d+)\\]\\.(\\w+)=(.+)/);\n          if (match) {\n            const [, index, field, value] = match;\n            const recordIndex = parseInt(index);\n            \n            if (!records[recordIndex]) {\n              records[recordIndex] = {};\n            }\n            \n            records[recordIndex][field] = value;\n          }\n        }\n      }\n      \n      return records.filter(record => record && Object.keys(record).length > 0);\n    } catch (error) {\n      console.error('Failed to parse unlock records:', error);\n      return [];\n    }\n  }\n\n  async captureFaceForUser(userId: string): Promise<DoorControlResult> {\n    console.log(`Capturing face for user ${userId}`);\n    \n    const result = await this.makeRequest(`/cgi-bin/accessControl.cgi?action=captureCmd&type=1&UserID=${userId}&heartbeat=5&timeout=10`);\n    \n    if (result.success) {\n      console.log(`✓ Face capture initiated for user ${userId}`);\n      return {\n        success: true,\n        message: `Face capture initiated for user ${userId}`,\n        action: 'capture'\n      };\n    } else {\n      console.error(`Failed to capture face for user ${userId}:`, result.error);\n      return {\n        success: false,\n        message: `Failed to capture face for user ${userId}: ${result.error}`\n      };\n    }\n  }\n\n  async setFaceRecognitionThreshold(threshold: number = 90): Promise<DoorControlResult> {\n    console.log(`Setting face recognition threshold to ${threshold}%`);\n    \n    const result = await this.makeRequest(`/cgi-bin/faceRecognitionServer.cgi?action=modifyGroup&groupID=10000&Similarity=${threshold}`);\n    \n    if (result.success) {\n      console.log(`✓ Face recognition threshold set to ${threshold}%`);\n      return {\n        success: true,\n        message: `Face recognition threshold set to ${threshold}%`,\n        action: 'threshold'\n      };\n    } else {\n      console.error(`Failed to set threshold to ${threshold}%:`, result.error);\n      return {\n        success: false,\n        message: `Failed to set threshold to ${threshold}%: ${result.error}`\n      };\n    }\n  }\n\n  async enableLivenessDetection(): Promise<DoorControlResult> {\n    console.log('Enabling liveness detection (anti-spoof)');\n    \n    const result = await this.makeRequest('/cgi-bin/configManager.cgi?action=setConfig&VideoAnalyseRule[0].Enable=true');\n    \n    if (result.success) {\n      console.log('✓ Liveness detection enabled successfully');\n      return {\n        success: true,\n        message: 'Liveness detection enabled successfully',\n        action: 'liveness'\n      };\n    } else {\n      console.error('Failed to enable liveness detection:', result.error);\n      return {\n        success: false,\n        message: `Failed to enable liveness detection: ${result.error}`\n      };\n    }\n  }\n\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    console.log(`Testing connection to primary Dahua device at ${this.config.host}:${this.config.port}`);\n    \n    const result = await this.makeRequest('/cgi-bin/magicBox.cgi?action=getDeviceType');\n    \n    if (result.success) {\n      return { success: true, message: 'Dahua connection successful' };\n    } else {\n      return { success: false, message: `Dahua connection failed: ${result.error}` };\n    }\n  }\n\n  async getDeviceInfo(deviceHost?: string, devicePort?: number): Promise<DoorControlResult & { deviceInfo?: any }> {\n    console.log(`Getting device information from ${deviceHost || this.config.host}:${devicePort || this.config.port}`);\n    \n    const endpoints = [\n      '/cgi-bin/magicBox.cgi?action=getDeviceType',\n      '/cgi-bin/magicBox.cgi?action=getSystemInfo',\n      '/cgi-bin/magicBox.cgi?action=getSoftwareVersion',\n      '/cgi-bin/magicBox.cgi?action=getHardwareVersion'\n    ];\n    \n    const deviceInfo: any = {};\n    let successCount = 0;\n    \n    for (const endpoint of endpoints) {\n      const result = await this.makeRequest(endpoint, 'GET', deviceHost, devicePort);\n      if (result.success) {\n        const key = endpoint.split('=')[1]; // Extract action name\n        deviceInfo[key] = this.parseDeviceResponse(result.data);\n        successCount++;\n      }\n    }\n    \n    if (successCount > 0) {\n      return {\n        success: true,\n        message: `Retrieved device information (${successCount}/${endpoints.length} endpoints)`,\n        action: 'deviceInfo',\n        deviceInfo\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Failed to retrieve device information'\n      };\n    }\n  }\n\n  private parseDeviceResponse(data: string): any {\n    const info: any = {};\n    \n    try {\n      const lines = data.split('\\n');\n      for (const line of lines) {\n        const [key, value] = line.split('=');\n        if (key && value) {\n          info[key.trim()] = value.trim();\n        }\n      }\n    } catch (error) {\n      console.error('Failed to parse device response:', error);\n    }\n    \n    return info;\n  }\n\n  async addUser(userInfo: { userID: string; userName: string; doors?: number[]; validFrom?: string; validTo?: string }): Promise<DoorControlResult> {\n    console.log(`Adding user ${userInfo.userName} with ID ${userInfo.userID}`);\n    \n    const postData = JSON.stringify({\n      Users: [{\n        UserID: userInfo.userID,\n        UserName: userInfo.userName,\n        UserType: 0, // Normal user\n        Doors: userInfo.doors || [0], // Default to door 0\n        ValidFrom: userInfo.validFrom || new Date().toISOString().split('T')[0],\n        ValidTo: userInfo.validTo || '2099-12-31'\n      }]\n    });\n    \n    const result = await this.makeRequest(\n      '/cgi-bin/AccessUser.cgi?action=insertMulti',\n      'POST',\n      undefined,\n      undefined,\n      postData,\n      'application/json'\n    );\n    \n    if (result.success) {\n      console.log(`✓ User ${userInfo.userName} added successfully`);\n      return {\n        success: true,\n        message: `User ${userInfo.userName} added successfully`,\n        action: 'addUser'\n      };\n    } else {\n      console.error(`Failed to add user ${userInfo.userName}:`, result.error);\n      return {\n        success: false,\n        message: `Failed to add user ${userInfo.userName}: ${result.error}`\n      };\n    }\n  }\n\n  async searchUsers(userID?: string, userName?: string): Promise<DoorControlResult & { users?: any[] }> {\n    console.log('Searching for users on Dahua device');\n    \n    let endpoint = '/cgi-bin/AccessUser.cgi?action=list';\n    \n    if (userID) {\n      endpoint += `&UserIDList[0]=${encodeURIComponent(userID)}`;\n    }\n    \n    const result = await this.makeRequest(endpoint);\n    \n    if (result.success) {\n      const users = this.parseUsersResponse(result.data);\n      console.log(`✓ Found ${users.length} users`);\n      \n      return {\n        success: true,\n        message: `Found ${users.length} users`,\n        action: 'searchUsers',\n        users\n      };\n    } else {\n      console.error('Failed to search users:', result.error);\n      return {\n        success: false,\n        message: `Failed to search users: ${result.error}`\n      };\n    }\n  }\n\n  private parseUsersResponse(data: string): any[] {\n    const users: any[] = [];\n    \n    try {\n      const lines = data.split('\\n');\n      let currentUser: any = {};\n      let userIndex = -1;\n      \n      for (const line of lines) {\n        if (line.startsWith('Users[')) {\n          const match = line.match(/Users\\[(\\d+)\\]\\.(\\w+)=(.+)/);\n          if (match) {\n            const [, index, field, value] = match;\n            const idx = parseInt(index);\n            \n            if (idx !== userIndex) {\n              if (userIndex >= 0) {\n                users.push(currentUser);\n              }\n              currentUser = {};\n              userIndex = idx;\n            }\n            \n            currentUser[field] = value;\n          }\n        }\n      }\n      \n      if (userIndex >= 0) {\n        users.push(currentUser);\n      }\n    } catch (error) {\n      console.error('Failed to parse users response:', error);\n    }\n    \n    return users;\n  }\n\n  async testAllDevices(): Promise<{ success: boolean; message: string; deviceResults: any[] }> {\n    console.log('Testing connections to all configured Dahua devices...');\n    \n    const results = [];\n    let allSuccessful = true;\n\n    // Test each configured device\n    for (const [roomEmail, device] of Array.from(this.devices.entries())) {\n      console.log(`Testing device ${device.host}:${device.port || 80} for room ${roomEmail}`);\n      \n      const result = await this.makeRequest(\n        '/cgi-bin/magicBox.cgi?action=getDeviceType',\n        'GET',\n        device.host,\n        device.port || 80\n      );\n      \n      const deviceResult = {\n        roomEmail,\n        host: device.host,\n        port: device.port || 80,\n        success: result.success,\n        message: result.success ? 'Connected' : result.error\n      };\n      \n      results.push(deviceResult);\n      if (!result.success) allSuccessful = false;\n    }\n    \n    return {\n      success: allSuccessful,\n      message: allSuccessful ? 'All devices connected' : 'Some devices failed',\n      deviceResults: results\n    };\n  }\n\n  // Webhook event parsing and validation\n  parseWebhookEvent(eventData: any): { isValid: boolean; eventType?: string; userInfo?: any; deviceInfo?: any } {\n    try {\n      // Enhanced webhook parsing based on Dahua specifications\n      if (!eventData || typeof eventData !== 'object') {\n        return { isValid: false };\n      }\n\n      // Common Dahua webhook fields\n      const eventType = eventData.Code || eventData.Action || 'unknown';\n      const userInfo = {\n        userID: eventData.UserID || eventData.PersonID,\n        userName: eventData.UserName || eventData.PersonName,\n        cardNo: eventData.CardNo,\n        method: eventData.Method // Face, Card, Password, etc.\n      };\n\n      const deviceInfo = {\n        channel: eventData.Channel || eventData.DoorNo,\n        deviceIP: eventData.DeviceIP,\n        serialNumber: eventData.SerialNumber,\n        timestamp: eventData.UTC || eventData.LocalTime\n      };\n\n      return {\n        isValid: true,\n        eventType,\n        userInfo,\n        deviceInfo\n      };\n    } catch (error) {\n      console.error('Failed to parse webhook event:', error);\n      return { isValid: false };\n    }\n  }\n\n  // Enhanced configuration management\n  async getAccessControlConfig(): Promise<DoorControlResult & { config?: any }> {\n    console.log('Getting access control configuration');\n    \n    const result = await this.makeRequest('/cgi-bin/configManager.cgi?action=getConfig&name=AccessControl');\n    \n    if (result.success) {\n      const config = this.parseConfigResponse(result.data);\n      return {\n        success: true,\n        message: 'Access control configuration retrieved',\n        action: 'getConfig',\n        config\n      };\n    } else {\n      return {\n        success: false,\n        message: `Failed to get configuration: ${result.error}`\n      };\n    }\n  }\n\n  private parseConfigResponse(data: string): any {\n    const config: any = {};\n    \n    try {\n      const lines = data.split('\\n');\n      for (const line of lines) {\n        if (line.includes('=')) {\n          const [key, value] = line.split('=');\n          if (key && value) {\n            // Handle nested configuration keys like AccessControl[0].DoorHoldTime\n            const cleanKey = key.trim();\n            const cleanValue = value.trim();\n            \n            if (cleanKey.includes('[')) {\n              // Parse array-style configuration\n              const match = cleanKey.match(/(\\w+)\\[(\\d+)\\]\\.(\\w+)/);\n              if (match) {\n                const [, section, index, field] = match;\n                if (!config[section]) config[section] = [];\n                if (!config[section][parseInt(index)]) config[section][parseInt(index)] = {};\n                config[section][parseInt(index)][field] = cleanValue;\n              }\n            } else {\n              config[cleanKey] = cleanValue;\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Failed to parse config response:', error);\n    }\n    \n    return config;\n  }\n}\n","size_bytes":24107},"server/services/microsoft-graph.ts":{"content":"import { ConfidentialClientApplication } from '@azure/msal-node';\nimport { Client } from '@microsoft/microsoft-graph-client';\n\ninterface MicrosoftGraphConfig {\n  clientId: string;\n  tenantId: string;\n  clientSecret: string;\n}\n\ninterface CalendarCheckResult {\n  success: boolean;\n  action: 'check-in' | 'no-booking' | 'unauthorized' | 'error';\n  reason: string;\n  eventId?: string;\n  eventSubject?: string;\n}\n\nexport class MicrosoftGraphService {\n  private cca: ConfidentialClientApplication;\n  private graphScopes = ['https://graph.microsoft.com/.default'];\n\n  constructor(config: MicrosoftGraphConfig) {\n    // Microsoft Graph config\n    const msalConfig = {\n      auth: {\n        clientId: process.env.AZURE_CLIENT_ID || config.clientId,\n        authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID || config.tenantId}`,\n        clientSecret: process.env.AZURE_CLIENT_SECRET || config.clientSecret\n      }\n    };\n\n    this.cca = new ConfidentialClientApplication(msalConfig);\n  }\n\n  private async getAccessToken(): Promise<string> {\n    try {\n      const tokenResponse = await this.cca.acquireTokenByClientCredential({ \n        scopes: this.graphScopes \n      });\n      return tokenResponse.accessToken;\n    } catch (error) {\n      console.error('Failed to acquire access token:', error);\n      throw new Error('Microsoft Graph authentication failed');\n    }\n  }\n\n  private async getGraphClient(): Promise<Client> {\n    const accessToken = await this.getAccessToken();\n    \n    const authProvider = {\n      getAccessToken: async () => {\n        return accessToken;\n      }\n    };\n    \n    return Client.init({\n      authProvider: authProvider\n    });\n  }\n\n  async checkExistingBooking(userEmail: string, roomEmail: string): Promise<CalendarCheckResult> {\n    try {\n      const graphClient = await this.getGraphClient();\n      const now = new Date();\n      const startTime = new Date(now.getTime() - 15 * 60 * 1000).toISOString(); // 15 minutes before\n      const endTime = new Date(now.getTime() + 15 * 60 * 1000).toISOString(); // 15 minutes after\n\n      console.log(`Checking for existing bookings for ${userEmail} in ${roomEmail} between ${startTime} and ${endTime}`);\n\n      const events = await graphClient\n        .api(`/users/${roomEmail}/calendar/events`)\n        .filter(`start/dateTime le '${endTime}' and end/dateTime ge '${startTime}'`)\n        .select('id,subject,start,end,attendees,body')\n        .get();\n\n      if (events.value && events.value.length > 0) {\n        console.log(`Found ${events.value.length} overlapping events`);\n        \n        for (const event of events.value) {\n          const isUserAttendee = event.attendees.some(\n            (att: any) => att.emailAddress.address.toLowerCase() === userEmail.toLowerCase()\n          );\n\n          if (isUserAttendee) {\n            // Auto check-in: Update event body with check-in information\n            const checkInTime = new Date().toISOString();\n            const updatedBody = {\n              contentType: 'text',\n              content: `${event.body?.content || ''}\\n\\n✓ Auto check-in via face recognition at ${checkInTime} for ${userEmail}`\n            };\n\n            await graphClient\n              .api(`/users/${roomEmail}/calendar/events/${event.id}`)\n              .patch({ body: updatedBody });\n\n            console.log(`✓ Auto check-in successful for ${userEmail} in ${roomEmail} (Event: ${event.subject})`);\n            return { \n              success: true, \n              action: 'check-in', \n              eventId: event.id, \n              eventSubject: event.subject,\n              reason: 'User authorized for existing booking'\n            };\n          }\n        }\n\n        console.log(`User ${userEmail} not found as attendee in any overlapping booking for ${roomEmail}`);\n        return { \n          success: false, \n          action: 'unauthorized', \n          reason: 'User not authorized for existing booking' \n        };\n      }\n\n      console.log(`No existing bookings found for ${roomEmail} in the current time window`);\n      return { \n        success: false, \n        action: 'no-booking', \n        reason: 'No existing booking found' \n      };\n\n    } catch (error) {\n      console.error('Error checking existing bookings:', error);\n      return {\n        success: false,\n        action: 'error',\n        reason: `Error checking calendar: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async checkActiveMeeting(userEmail: string, roomEmail: string): Promise<{hasActiveMeeting: boolean, meetingEnd?: string, meetingSubject?: string, eventId?: string}> {\n    try {\n      console.log(`🔍 Checking active meeting for ${userEmail} in room ${roomEmail}`);\n      \n      const graphClient = await this.getGraphClient();\n      const now = new Date();\n      const endTime = new Date(now.getTime() + 8 * 60 * 60 * 1000); // Next 8 hours\n      \n      // Format times for Graph API\n      const startTimeStr = now.toISOString();\n      const endTimeStr = endTime.toISOString();\n      \n      console.log(`📅 Checking active meetings from: ${startTimeStr} to ${endTimeStr}`);\n      \n      // Check room's calendar for current meetings using direct API call\n      const accessToken = await this.getAccessToken();\n      const filter = `start/dateTime le '${endTimeStr}' and end/dateTime ge '${startTimeStr}'`;\n      const select = 'id,subject,start,end,attendees,organizer';\n      const url = `https://graph.microsoft.com/v1.0/users/${roomEmail}/calendar/events?$filter=${encodeURIComponent(filter)}&$select=${select}`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        console.error(`Graph API error: ${response.status} ${response.statusText}`);\n        return { hasActiveMeeting: false };\n      }\n\n      const roomEvents = await response.json();\n      \n      console.log(`📋 Found ${roomEvents.value?.length || 0} events in room ${roomEmail}`);\n      \n      // Find currently active meeting where user is organizer or attendee\n      const activeMeeting = roomEvents.value?.find((event: any) => {\n        const eventStart = new Date(event.start.dateTime);\n        const eventEnd = new Date(event.end.dateTime);\n        const isCurrentlyActive = now >= eventStart && now <= eventEnd;\n        \n        if (!isCurrentlyActive) return false;\n        \n        // Check if user is organizer\n        const isUserOrganizer = event.organizer?.emailAddress?.address?.toLowerCase() === userEmail.toLowerCase();\n        \n        // Check if user is attendee\n        const isUserAttendee = event.attendees?.some((attendee: any) => \n          attendee.emailAddress?.address?.toLowerCase() === userEmail.toLowerCase()\n        );\n        \n        return isUserOrganizer || isUserAttendee;\n      });\n      \n      if (activeMeeting) {\n        const meetingEnd = new Date(activeMeeting.end.dateTime).toLocaleString();\n        console.log(`✅ Found active meeting for ${userEmail}: ${activeMeeting.subject} until ${meetingEnd}`);\n        \n        // Auto check-in: Update event body with check-in information\n        try {\n          const checkInTime = new Date().toISOString();\n          const updatedBody = {\n            contentType: 'text',\n            content: `${activeMeeting.body?.content || ''}\\n\\n✓ Auto check-in via face recognition at ${checkInTime} for ${userEmail}`\n          };\n\n          const patchResponse = await fetch(`https://graph.microsoft.com/v1.0/users/${roomEmail}/calendar/events/${activeMeeting.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ body: updatedBody })\n          });\n\n          console.log(`✓ Auto check-in successful for ${userEmail} in active meeting`);\n        } catch (checkInError) {\n          console.error('❌ Auto check-in failed:', checkInError);\n        }\n        \n        return {\n          hasActiveMeeting: true,\n          meetingEnd,\n          meetingSubject: activeMeeting.subject,\n          eventId: activeMeeting.id\n        };\n      } else {\n        console.log(`❌ No active meeting found for ${userEmail} in room ${roomEmail}`);\n        return { hasActiveMeeting: false };\n      }\n      \n    } catch (error) {\n      console.error('❌ Error checking active meeting:', error);\n      return { hasActiveMeeting: false };\n    }\n  }\n\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    try {\n      const accessToken = await this.getAccessToken();\n      return { success: true, message: 'Microsoft Graph connection successful' };\n    } catch (error) {\n      return { \n        success: false, \n        message: `Microsoft Graph connection failed: ${error instanceof Error ? error.message : 'Unknown error'}` \n      };\n    }\n  }\n}\n","size_bytes":8990},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/access-logs.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Topbar from \"@/components/layout/topbar\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Check, X, Search, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\nexport default function AccessLogs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  const { data: accessLogs, isLoading } = useQuery({\n    queryKey: [\"/api/access-logs\"],\n    refetchInterval: 30000,\n  });\n\n  const filteredLogs = (accessLogs || []).filter((log: any) => {\n    const matchesSearch = !searchTerm || \n      log.userEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.roomEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.dahuaUserId?.includes(searchTerm);\n    \n    const matchesFilter = filterStatus === \"all\" || \n      (filterStatus === \"granted\" && log.accessGranted) ||\n      (filterStatus === \"denied\" && !log.accessGranted);\n\n    return matchesSearch && matchesFilter;\n  });\n\n  return (\n    <>\n      <Topbar \n        title=\"Access Logs\" \n        description=\"View and manage system access history\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Access Events</CardTitle>\n              <Button variant=\"outline\" className=\"flex items-center space-x-2\" data-testid=\"button-export-logs\">\n                <Download className=\"w-4 h-4\" />\n                <span>Export</span>\n              </Button>\n            </div>\n            \n            {/* Filters */}\n            <div className=\"flex items-center space-x-4 mt-4\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search by user, room, or ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-logs\"\n                />\n              </div>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Events</SelectItem>\n                  <SelectItem value=\"granted\">Access Granted</SelectItem>\n                  <SelectItem value=\"denied\">Access Denied</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 10 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4 p-4 border rounded-lg animate-pulse\">\n                    <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-1/3 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                    <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    <div className=\"h-4 bg-muted rounded w-16\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredLogs.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredLogs.map((log: any) => (\n                  <div key={log.id} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg hover:bg-secondary/20 transition-colors\">\n                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                      log.accessGranted ? 'bg-accent' : 'bg-destructive'\n                    }`}>\n                      {log.accessGranted ? (\n                        <Check className=\"text-accent-foreground text-sm\" />\n                      ) : (\n                        <X className=\"text-destructive-foreground text-sm\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <p className=\"text-sm font-medium text-foreground\">\n                          {log.userEmail || `User ID: ${log.dahuaUserId}`}\n                        </p>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {log.eventType}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {log.roomEmail ? log.roomEmail.split('@')[0] : `Door ${log.doorChannel}`} • \n                        {log.reason}\n                      </p>\n                    </div>\n                    \n                    <Badge \n                      variant={log.accessGranted ? \"default\" : \"destructive\"}\n                      className=\"text-xs\"\n                    >\n                      {log.accessGranted ? 'Granted' : 'Denied'}\n                    </Badge>\n                    \n                    <div className=\"text-right min-w-[120px]\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        {log.timestamp ? format(new Date(log.timestamp), 'MMM dd, yyyy') : 'Unknown'}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {log.timestamp ? format(new Date(log.timestamp), 'h:mm:ss a') : 'Unknown'}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No access logs found</p>\n                {searchTerm && (\n                  <p className=\"text-sm mt-2\">Try adjusting your search criteria</p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":6622},"client/src/pages/configuration.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Topbar from \"@/components/layout/topbar\";\nimport { Settings, Shield, Database, Network, Save, Eye, EyeOff } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Configuration() {\n  const { toast } = useToast();\n  const [showSecrets, setShowSecrets] = useState(false);\n  \n  // Dahua Configuration  \n  const [dahuaHost, setDahuaHost] = useState(\"10.255.254.11\");\n  const [dahuaPort, setDahuaPort] = useState(\"80\");\n  const [dahuaUser, setDahuaUser] = useState(\"admin\");\n  const [dahuaPass, setDahuaPass] = useState(\"••••••••••••••••\");\n  const [dahuaTcpPort, setDahuaTcpPort] = useState(\"37777\");\n  const [dahuaHttpsPort, setDahuaHttpsPort] = useState(\"443\");\n  const [dahuaRtspPort, setDahuaRtspPort] = useState(\"554\");\n  \n  // Microsoft Graph Configuration\n  const [azureClientId, setAzureClientId] = useState(\"206217f2-eb5f-46f5-aa7e-f246c2a97ef5\");\n  const [azureTenantId, setAzureTenantId] = useState(\"14a72467-3f25-4572-a535-3d5eddb00cc5\");\n  const [azureClientSecret, setAzureClientSecret] = useState(\"••••••••••••••••••••••••••••••••\");\n  \n  // System Settings\n  const [autoCreateBookings, setAutoCreateBookings] = useState(false);\n  const [accessWindow, setAccessWindow] = useState(\"15\");\n  const [debugLogging, setDebugLogging] = useState(true);\n\n  const handleSaveConfiguration = () => {\n    toast({\n      title: \"Configuration Saved\",\n      description: \"System configuration has been updated successfully\",\n    });\n  };\n\n  const maskValue = (value: string, visible: boolean) => {\n    if (visible) return value;\n    return \"•\".repeat(value.length);\n  };\n\n  return (\n    <>\n      <Topbar \n        title=\"Configuration\" \n        description=\"Manage system settings and credentials\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Dahua Device Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"mr-2 text-primary\" />\n              Dahua Device Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"dahua-host\">Device Host/IP</Label>\n                <Input\n                  id=\"dahua-host\"\n                  value={dahuaHost}\n                  onChange={(e) => setDahuaHost(e.target.value)}\n                  placeholder=\"10.255.254.11\"\n                  data-testid=\"input-dahua-host\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-port\">HTTP Port</Label>\n                <Input\n                  id=\"dahua-port\"\n                  value={dahuaPort}\n                  onChange={(e) => setDahuaPort(e.target.value)}\n                  placeholder=\"80\"\n                  data-testid=\"input-dahua-port\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-user\">Username</Label>\n                <Input\n                  id=\"dahua-user\"\n                  value={dahuaUser}\n                  onChange={(e) => setDahuaUser(e.target.value)}\n                  placeholder=\"admin\"\n                  data-testid=\"input-dahua-user\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-pass\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"dahua-pass\"\n                    type={showSecrets ? \"text\" : \"password\"}\n                    value={showSecrets ? \"P@ssw0rd@247#\" : dahuaPass}\n                    onChange={(e) => setDahuaPass(e.target.value)}\n                    placeholder=\"••••••••••••••••\"\n                    data-testid=\"input-dahua-pass\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowSecrets(!showSecrets)}\n                    data-testid=\"button-toggle-secrets\"\n                  >\n                    {showSecrets ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-tcp-port\">TCP Port</Label>\n                <Input\n                  id=\"dahua-tcp-port\"\n                  value={dahuaTcpPort}\n                  onChange={(e) => setDahuaTcpPort(e.target.value)}\n                  placeholder=\"37777\"\n                  data-testid=\"input-dahua-tcp-port\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-https-port\">HTTPS Port</Label>\n                <Input\n                  id=\"dahua-https-port\"\n                  value={dahuaHttpsPort}\n                  onChange={(e) => setDahuaHttpsPort(e.target.value)}\n                  placeholder=\"443\"\n                  data-testid=\"input-dahua-https-port\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dahua-rtsp-port\">RTSP Port</Label>\n                <Input\n                  id=\"dahua-rtsp-port\"\n                  value={dahuaRtspPort}\n                  onChange={(e) => setDahuaRtspPort(e.target.value)}\n                  placeholder=\"554\"\n                  data-testid=\"input-dahua-rtsp-port\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Microsoft Graph Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Network className=\"mr-2 text-primary\" />\n              Microsoft Graph Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"azure-client-id\">Azure Client ID</Label>\n                <Input\n                  id=\"azure-client-id\"\n                  value={azureClientId}\n                  onChange={(e) => setAzureClientId(e.target.value)}\n                  placeholder=\"206217f2-eb5f-46f5-aa7e-f246c2a97ef5\"\n                  data-testid=\"input-azure-client-id\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"azure-tenant-id\">Azure Tenant ID</Label>\n                <Input\n                  id=\"azure-tenant-id\"\n                  value={azureTenantId}\n                  onChange={(e) => setAzureTenantId(e.target.value)}\n                  placeholder=\"14a72467-3f25-4572-a535-3d5eddb00cc5\"\n                  data-testid=\"input-azure-tenant-id\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"azure-client-secret\">Azure Client Secret</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"azure-client-secret\"\n                    type={showSecrets ? \"text\" : \"password\"}\n                    value={showSecrets ? \"4pT8Q~zhZE_PFKf9nnZCrLNJqqZpYaotFqebTcPu\" : azureClientSecret}\n                    onChange={(e) => setAzureClientSecret(e.target.value)}\n                    placeholder=\"••••••••••••••••••••••••••••••••\"\n                    data-testid=\"input-azure-client-secret\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"mr-2 text-primary\" />\n              System Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label>Auto-create Bookings</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Automatically create reservations when no booking exists\n                </p>\n              </div>\n              <Switch\n                checked={autoCreateBookings}\n                onCheckedChange={setAutoCreateBookings}\n                data-testid=\"switch-auto-create-bookings\"\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"access-window\">Access Time Window (minutes)</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                How many minutes before/after a meeting to allow access\n              </p>\n              <Input\n                id=\"access-window\"\n                type=\"number\"\n                value={accessWindow}\n                onChange={(e) => setAccessWindow(e.target.value)}\n                placeholder=\"15\"\n                className=\"w-32\"\n                data-testid=\"input-access-window\"\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label>Debug Logging</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Enable detailed logging for troubleshooting\n                </p>\n              </div>\n              <Switch\n                checked={debugLogging}\n                onCheckedChange={setDebugLogging}\n                data-testid=\"switch-debug-logging\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Environment Variables Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Database className=\"mr-2 text-primary\" />\n              Environment Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Node Environment</span>\n                <Badge variant=\"outline\">development</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Server Port</span>\n                <Badge variant=\"outline\">5000</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Webhook Endpoint</span>\n                <Badge variant=\"outline\">/api/dahua-webhook</Badge>\n              </div>\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Required Environment Variables</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-xs text-muted-foreground font-mono\">\n                <div>AZURE_CLIENT_ID</div>\n                <div>AZURE_TENANT_ID</div>\n                <div>AZURE_CLIENT_SECRET</div>\n                <div>DAHUA_HOST</div>\n                <div>DAHUA_PORT</div>\n                <div>DAHUA_USER</div>\n                <div>DAHUA_PASS</div>\n                <div>DAHUA_TCP_PORT</div>\n                <div>DAHUA_HTTPS_PORT</div>\n                <div>DAHUA_RTSP_PORT</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Save Configuration */}\n        <div className=\"flex justify-end\">\n          <Button \n            onClick={handleSaveConfiguration}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-save-configuration\"\n          >\n            <Save className=\"w-4 h-4\" />\n            <span>Save Configuration</span>\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":12534},"client/src/pages/dashboard.tsx":{"content":"import Topbar from \"@/components/layout/topbar\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport UserMappingsWidget from \"@/components/dashboard/user-mappings-widget\";\nimport RoomMappingsWidget from \"@/components/dashboard/room-mappings-widget\";\nimport TestInterface from \"@/components/dashboard/test-interface\";\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Topbar \n        title=\"Dashboard\" \n        description=\"Monitor and manage access control system\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        <MetricsCards />\n        \n        {/* Recent Activity & Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <RecentActivity />\n          <QuickActions />\n        </div>\n\n        {/* System Configuration & Mappings */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <UserMappingsWidget />\n          <RoomMappingsWidget />\n        </div>\n\n        <TestInterface />\n      </div>\n    </>\n  );\n}\n","size_bytes":1170},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/room-mappings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Topbar from \"@/components/layout/topbar\";\nimport StatusIndicator from \"@/components/common/status-indicator\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertRoomMappingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst formSchema = insertRoomMappingSchema.extend({\n  roomName: z.string().optional(),\n});\n\nexport default function RoomMappings() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: roomMappings, isLoading } = useQuery({\n    queryKey: [\"/api/room-mappings\"],\n  });\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      doorChannel: 1,\n      roomEmail: \"\",\n      roomName: \"\",\n      isActive: true,\n    },\n  });\n\n  const createRoomMutation = useMutation({\n    mutationFn: (data: z.infer<typeof formSchema>) => \n      apiRequest(\"POST\", \"/api/room-mappings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-mappings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Room Added\",\n        description: \"Room mapping created successfully\"\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Add Room\",\n        description: \"Unable to create room mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteRoomMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/room-mappings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-mappings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Room Removed\",\n        description: \"Room mapping deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Unable to delete room mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createRoomMutation.mutate(data);\n  };\n\n  const getRandomStatus = (index: number) => {\n    // Simulate different statuses for visual variety\n    return index === 2 ? 'warning' : 'online';\n  };\n\n  return (\n    <>\n      <Topbar \n        title=\"Room Mappings\" \n        description=\"Manage door channel to room email mappings\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Room Mappings</CardTitle>\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-room-mapping\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Room Mapping\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add Room Mapping</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"doorChannel\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Door Channel</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"1\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                data-testid=\"input-door-channel\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"roomEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Room Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"Room5@elrace.com\" {...field} data-testid=\"input-room-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"roomName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Room Name (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Conference Room 5\" {...field} data-testid=\"input-room-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex space-x-2 pt-4\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createRoomMutation.isPending}\n                          data-testid=\"button-save-room\"\n                        >\n                          {createRoomMutation.isPending ? \"Adding...\" : \"Add Room\"}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsDialogOpen(false)}\n                          data-testid=\"button-cancel-room\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg animate-pulse\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                      <div>\n                        <div className=\"h-4 bg-muted rounded w-48 mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-32\"></div>\n                      </div>\n                    </div>\n                    <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : roomMappings && roomMappings.length > 0 ? (\n              <div className=\"space-y-4\">\n                {roomMappings.map((mapping: any, index: number) => (\n                  <div key={mapping.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-secondary/20 transition-colors\">\n                    <div className=\"flex items-center space-x-3\">\n                      <StatusIndicator status={mapping.isActive ? getRandomStatus(index) : 'offline'} />\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\">\n                          {mapping.roomName || mapping.roomEmail}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Door Channel: {mapping.doorChannel} • {mapping.roomEmail}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => deleteRoomMutation.mutate(mapping.id)}\n                      disabled={deleteRoomMutation.isPending}\n                      className=\"text-destructive hover:text-destructive/80\"\n                      data-testid={`button-delete-room-${mapping.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No room mappings configured</p>\n                <p className=\"text-sm mt-2\">Add your first room mapping to get started</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":9598},"client/src/pages/test-endpoints.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Topbar from \"@/components/layout/topbar\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { FlaskConical, Globe, Calendar, Heart, DoorOpen, Network, Play, RefreshCw } from \"lucide-react\";\n\nexport default function TestEndpoints() {\n  const { toast } = useToast();\n  \n  // Test states\n  const [webhookUserId, setWebhookUserId] = useState(\"2689\");\n  const [webhookDoor, setWebhookDoor] = useState(\"1\");\n  const [webhookEventCode, setWebhookEventCode] = useState(\"FaceRecognition\");\n  \n  const [calendarUserEmail, setCalendarUserEmail] = useState(\"aziz@elrace.com\");\n  const [calendarRoomEmail, setCalendarRoomEmail] = useState(\"Room1@elrace.com\");\n  \n  const [doorChannel, setDoorChannel] = useState(\"1\");\n  const [doorAction, setDoorAction] = useState(\"open\");\n  \n  const [advancedAction, setAdvancedAction] = useState(\"records\");\n  const [captureUserId, setCaptureUserId] = useState(\"2689\");\n  const [recognitionThreshold, setRecognitionThreshold] = useState(\"90\");\n  \n  const [testResults, setTestResults] = useState<any>(null);\n\n  const { data: roomMappings } = useQuery({\n    queryKey: [\"/api/room-mappings\"]\n  });\n\n  const { data: userMappings } = useQuery({\n    queryKey: [\"/api/user-mappings\"]\n  });\n\n  // Test webhook mutation\n  const testWebhookMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/event\", {\n      code: webhookEventCode,\n      action: \"Start\",\n      index: parseInt(webhookDoor),\n      data: { UserID: webhookUserId, Door: parseInt(webhookDoor) }\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setTestResults({ type: 'webhook', result });\n      toast({\n        title: \"Webhook Test Complete\",\n        description: result.success ? \"Event processed successfully\" : \"Event processing failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      setTestResults({ type: 'webhook', error: error.message });\n      toast({\n        title: \"Webhook Test Failed\",\n        description: \"Unable to send test event\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Test calendar mutation\n  const testCalendarMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/calendar\", {\n      userEmail: calendarUserEmail,\n      roomEmail: calendarRoomEmail\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setTestResults({ type: 'calendar', result });\n      toast({\n        title: \"Calendar Test Complete\",\n        description: result.success ? \"Calendar check completed\" : \"Calendar check failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      setTestResults({ type: 'calendar', error: error.message });\n      toast({\n        title: \"Calendar Test Failed\",\n        description: \"Unable to test calendar integration\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Test door control mutation\n  const testDoorMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/door\", {\n      channel: parseInt(doorChannel),\n      action: doorAction\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setTestResults({ type: 'door', result });\n      toast({\n        title: \"Door Test Complete\",\n        description: result.success ? `Door ${doorAction} successful` : `Door ${doorAction} failed`,\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      setTestResults({ type: 'door', error: error.message });\n      toast({\n        title: \"Door Test Failed\",\n        description: \"Unable to control door\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Test connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/connection\"),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setTestResults({ type: 'connection', result });\n      toast({\n        title: \"Connection Test Complete\",\n        description: result.success ? \"All services connected\" : \"Some connections failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      setTestResults({ type: 'connection', error: error.message });\n      toast({\n        title: \"Connection Test Failed\",\n        description: \"Unable to test connections\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Test advanced Dahua features mutation\n  const testAdvancedMutation = useMutation({\n    mutationFn: () => {\n      const payload: any = { action: advancedAction };\n      if (advancedAction === 'capture') {\n        payload.userId = captureUserId;\n      } else if (advancedAction === 'threshold') {\n        payload.threshold = parseInt(recognitionThreshold);\n      }\n      return apiRequest(\"POST\", \"/api/test/dahua-advanced\", payload);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setTestResults({ type: 'advanced', result });\n      toast({\n        title: \"Advanced Test Complete\",\n        description: result.success ? `${advancedAction} operation successful` : `${advancedAction} operation failed`,\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      setTestResults({ type: 'advanced', error: error.message });\n      toast({\n        title: \"Advanced Test Failed\",\n        description: \"Unable to perform advanced operation\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const rooms = roomMappings || [];\n  const users = userMappings || [];\n\n  return (\n    <>\n      <Topbar \n        title=\"Test Endpoints\" \n        description=\"Test and validate system functionality\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Test Controls */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Webhook Test */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Globe className=\"mr-2 text-primary\" />\n                Test Webhook Event\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"webhook-event-code\">Event Code</Label>\n                <Select value={webhookEventCode} onValueChange={setWebhookEventCode}>\n                  <SelectTrigger data-testid=\"select-webhook-event-code\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"FaceRecognition\">Face Recognition</SelectItem>\n                    <SelectItem value=\"AccessControl\">Access Control</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"webhook-user-id\">User ID</Label>\n                <Select value={webhookUserId} onValueChange={setWebhookUserId}>\n                  <SelectTrigger data-testid=\"select-webhook-user-id\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {users.map((user: any) => (\n                      <SelectItem key={user.id} value={user.dahuaUserId}>\n                        {user.dahuaUserId} - {user.email}\n                      </SelectItem>\n                    ))}\n                    <SelectItem value=\"12345\">12345 (Default)</SelectItem>\n                    <SelectItem value=\"99999\">99999 (Unmapped)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"webhook-door\">Door/Channel</Label>\n                <Select value={webhookDoor} onValueChange={setWebhookDoor}>\n                  <SelectTrigger data-testid=\"select-webhook-door\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {rooms.map((room: any) => (\n                      <SelectItem key={room.id} value={room.doorChannel.toString()}>\n                        {room.doorChannel} - {room.roomName || room.roomEmail}\n                      </SelectItem>\n                    ))}\n                    <SelectItem value=\"1\">1 (Default)</SelectItem>\n                    <SelectItem value=\"2\">2</SelectItem>\n                    <SelectItem value=\"3\">3</SelectItem>\n                    <SelectItem value=\"4\">4</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button\n                onClick={() => testWebhookMutation.mutate()}\n                disabled={testWebhookMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-test-webhook-event\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                {testWebhookMutation.isPending ? \"Sending...\" : \"Send Webhook Event\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Calendar Test */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"mr-2 text-accent\" />\n                Test Calendar Integration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"calendar-user-email\">User Email</Label>\n                <Select value={calendarUserEmail} onValueChange={setCalendarUserEmail}>\n                  <SelectTrigger data-testid=\"select-calendar-user-email\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {users.map((user: any) => (\n                      <SelectItem key={user.id} value={user.email}>\n                        {user.email}\n                      </SelectItem>\n                    ))}\n                    <SelectItem value=\"aziz@elrace.com\">aziz@elrace.com (Default)</SelectItem>\n                    <SelectItem value=\"unknown@elrace.com\">unknown@elrace.com (Test)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"calendar-room-email\">Room Email</Label>\n                <Select value={calendarRoomEmail} onValueChange={setCalendarRoomEmail}>\n                  <SelectTrigger data-testid=\"select-calendar-room-email\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {rooms.map((room: any) => (\n                      <SelectItem key={room.id} value={room.roomEmail}>\n                        {room.roomName || room.roomEmail}\n                      </SelectItem>\n                    ))}\n                    <SelectItem value=\"Room1@elrace.com\">Room1@elrace.com</SelectItem>\n                    <SelectItem value=\"Room2@elrace.com\">Room2@elrace.com</SelectItem>\n                    <SelectItem value=\"Room3@elrace.com\">Room3@elrace.com</SelectItem>\n                    <SelectItem value=\"Room4@elrace.com\">Room4@elrace.com</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button\n                onClick={() => testCalendarMutation.mutate()}\n                disabled={testCalendarMutation.isPending}\n                className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\"\n                data-testid=\"button-test-calendar-integration\"\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                {testCalendarMutation.isPending ? \"Testing...\" : \"Test Calendar\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Door Control & Connection Tests */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Door Control Test */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <DoorOpen className=\"mr-2 text-chart-2\" />\n                Test Door Control\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"door-channel\">Door Channel</Label>\n                <Select value={doorChannel} onValueChange={setDoorChannel}>\n                  <SelectTrigger data-testid=\"select-door-channel\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {rooms.map((room: any) => (\n                      <SelectItem key={room.id} value={room.doorChannel.toString()}>\n                        {room.doorChannel} - {room.roomName || room.roomEmail}\n                      </SelectItem>\n                    ))}\n                    <SelectItem value=\"1\">Door 1</SelectItem>\n                    <SelectItem value=\"2\">Door 2</SelectItem>\n                    <SelectItem value=\"3\">Door 3</SelectItem>\n                    <SelectItem value=\"4\">Door 4</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"door-action\">Action</Label>\n                <Select value={doorAction} onValueChange={setDoorAction}>\n                  <SelectTrigger data-testid=\"select-door-action\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"open\">Open Door</SelectItem>\n                    <SelectItem value=\"close\">Close Door</SelectItem>\n                    <SelectItem value=\"status\">Check Status</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button\n                onClick={() => testDoorMutation.mutate()}\n                disabled={testDoorMutation.isPending}\n                className=\"w-full bg-chart-2 text-primary-foreground hover:bg-chart-2/90\"\n                data-testid=\"button-test-door-control\"\n              >\n                <DoorOpen className=\"w-4 h-4 mr-2\" />\n                {testDoorMutation.isPending ? \"Processing...\" : `${doorAction.charAt(0).toUpperCase()}${doorAction.slice(1)} Door`}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Connection Test */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Network className=\"mr-2 text-chart-3\" />\n                Test All Connections\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Dahua Device</span>\n                  <Badge variant=\"outline\">Ready to Test</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Microsoft Graph</span>\n                  <Badge variant=\"outline\">Ready to Test</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Server Health</span>\n                  <Badge variant=\"outline\">Ready to Test</Badge>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <Button\n                onClick={() => testConnectionMutation.mutate()}\n                disabled={testConnectionMutation.isPending}\n                className=\"w-full bg-chart-3 text-primary-foreground hover:bg-chart-3/90\"\n                data-testid=\"button-test-all-connections\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                {testConnectionMutation.isPending ? \"Testing...\" : \"Test All Connections\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Advanced Dahua Operations */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <FlaskConical className=\"mr-2 text-chart-4\" />\n              Advanced Dahua Operations\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"advanced-action\">Operation</Label>\n                  <Select value={advancedAction} onValueChange={setAdvancedAction}>\n                    <SelectTrigger data-testid=\"select-advanced-action\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"records\">Get Unlock Records</SelectItem>\n                      <SelectItem value=\"capture\">Capture Face for User</SelectItem>\n                      <SelectItem value=\"threshold\">Set Recognition Threshold</SelectItem>\n                      <SelectItem value=\"liveness\">Enable Liveness Detection</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {advancedAction === 'capture' && (\n                  <div>\n                    <Label htmlFor=\"capture-user-id\">User ID for Face Capture</Label>\n                    <Select value={captureUserId} onValueChange={setCaptureUserId}>\n                      <SelectTrigger data-testid=\"select-capture-user-id\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {users.map((user: any) => (\n                          <SelectItem key={user.id} value={user.dahuaUserId}>\n                            {user.dahuaUserId} - {user.email}\n                          </SelectItem>\n                        ))}\n                        <SelectItem value=\"12345\">12345 (Default)</SelectItem>\n                        <SelectItem value=\"2689\">2689 (Example)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n                \n                {advancedAction === 'threshold' && (\n                  <div>\n                    <Label htmlFor=\"recognition-threshold\">Recognition Threshold (%)</Label>\n                    <Input\n                      id=\"recognition-threshold\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"100\"\n                      value={recognitionThreshold}\n                      onChange={(e) => setRecognitionThreshold(e.target.value)}\n                      placeholder=\"90\"\n                      data-testid=\"input-recognition-threshold\"\n                    />\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-secondary/50 rounded-lg p-4\">\n                  <h4 className=\"text-sm font-medium mb-2\">Operation Details</h4>\n                  {advancedAction === 'records' && (\n                    <p className=\"text-xs text-muted-foreground\">Retrieves historical unlock/access records from the device for audit purposes.</p>\n                  )}\n                  {advancedAction === 'capture' && (\n                    <p className=\"text-xs text-muted-foreground\">Initiates face capture for a specific user to update their facial recognition profile.</p>\n                  )}\n                  {advancedAction === 'threshold' && (\n                    <p className=\"text-xs text-muted-foreground\">Sets the similarity threshold for face recognition matching (higher = more strict).</p>\n                  )}\n                  {advancedAction === 'liveness' && (\n                    <p className=\"text-xs text-muted-foreground\">Enables anti-spoofing detection to prevent photo/video attacks.</p>\n                  )}\n                </div>\n                \n                <Button\n                  onClick={() => testAdvancedMutation.mutate()}\n                  disabled={testAdvancedMutation.isPending}\n                  className=\"w-full bg-chart-4 text-primary-foreground hover:bg-chart-4/90\"\n                  data-testid=\"button-test-advanced-operation\"\n                >\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  {testAdvancedMutation.isPending ? \"Processing...\" : `Execute ${advancedAction.charAt(0).toUpperCase()}${advancedAction.slice(1)}`}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Test Results */}\n        {testResults && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FlaskConical className=\"mr-2 text-primary\" />\n                Test Results\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {testResults.type}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {testResults.result && (\n                  <div>\n                    <Label className=\"text-sm font-medium\">Response</Label>\n                    <Textarea\n                      value={JSON.stringify(testResults.result, null, 2)}\n                      readOnly\n                      rows={12}\n                      className=\"font-mono text-xs mt-2\"\n                      data-testid=\"textarea-test-results\"\n                    />\n                  </div>\n                )}\n                \n                {testResults.error && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-destructive\">Error</Label>\n                    <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-md mt-2\">\n                      <p className=\"text-sm text-destructive\">{testResults.error}</p>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setTestResults(null)}\n                    data-testid=\"button-clear-results\"\n                  >\n                    Clear Results\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(JSON.stringify(testResults, null, 2));\n                      toast({ title: \"Copied\", description: \"Results copied to clipboard\" });\n                    }}\n                    data-testid=\"button-copy-results\"\n                  >\n                    Copy to Clipboard\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* API Documentation */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Available API Endpoints</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Webhook Endpoints</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>POST /api/dahua-webhook</div>\n                    <div>POST /api/test/event</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Calendar Endpoints</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>POST /api/test/calendar</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Door Control</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>POST /api/test/door</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">System Health</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>GET /api/health</div>\n                    <div>POST /api/test/connection</div>\n                    <div>GET /api/system-health</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">User Management</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>GET /api/user-mappings</div>\n                    <div>POST /api/user-mappings</div>\n                    <div>DELETE /api/user-mappings/:id</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Room Management</h4>\n                  <div className=\"space-y-1 text-muted-foreground font-mono\">\n                    <div>GET /api/room-mappings</div>\n                    <div>POST /api/room-mappings</div>\n                    <div>DELETE /api/room-mappings/:id</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Webhook Configuration Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Webhook Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Dahua Device Configuration</Label>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Configure your Dahua device to send webhook events to this middleware:\n                </p>\n              </div>\n              \n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <Label className=\"text-xs font-medium\">Webhook URL</Label>\n                <div className=\"mt-1 p-2 bg-input rounded border font-mono text-xs\">\n                  http://your-server-ip:5000/api/dahua-webhook\n                </div>\n              </div>\n              \n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <Label className=\"text-xs font-medium\">Sample Webhook Payload</Label>\n                <Textarea\n                  value={JSON.stringify({\n                    \"AlarmType\": \"FaceRecognition\",\n                    \"Action\": \"Start\",\n                    \"ChannelID\": 1,\n                    \"Data\": {\n                      \"UserID\": \"12345\",\n                      \"Door\": 1\n                    }\n                  }, null, 2)}\n                  readOnly\n                  rows={8}\n                  className=\"font-mono text-xs mt-2\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":27978},"client/src/pages/user-mappings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Topbar from \"@/components/layout/topbar\";\nimport StatusIndicator from \"@/components/common/status-indicator\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserMappingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst formSchema = insertUserMappingSchema.extend({\n  name: z.string().optional(),\n});\n\nexport default function UserMappings() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: userMappings, isLoading } = useQuery({\n    queryKey: [\"/api/user-mappings\"],\n  });\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      dahuaUserId: \"\",\n      email: \"\",\n      name: \"\",\n      isActive: true,\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (data: z.infer<typeof formSchema>) => \n      apiRequest(\"POST\", \"/api/user-mappings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-mappings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"User Added\",\n        description: \"User mapping created successfully\"\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Add User\",\n        description: \"Unable to create user mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/user-mappings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-mappings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"User Removed\",\n        description: \"User mapping deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Unable to delete user mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createUserMutation.mutate(data);\n  };\n\n  return (\n    <>\n      <Topbar \n        title=\"User Mappings\" \n        description=\"Manage Dahua user ID to email mappings\" \n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>User Mappings</CardTitle>\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-user-mapping\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add User Mapping\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add User Mapping</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"dahuaUserId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Dahua User ID</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"12345\" {...field} data-testid=\"input-dahua-user-id\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"user@elrace.com\" {...field} data-testid=\"input-user-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Name (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"John Doe\" {...field} data-testid=\"input-user-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex space-x-2 pt-4\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createUserMutation.isPending}\n                          data-testid=\"button-save-user\"\n                        >\n                          {createUserMutation.isPending ? \"Adding...\" : \"Add User\"}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsDialogOpen(false)}\n                          data-testid=\"button-cancel-user\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg animate-pulse\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                      <div>\n                        <div className=\"h-4 bg-muted rounded w-48 mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-32\"></div>\n                      </div>\n                    </div>\n                    <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : userMappings && userMappings.length > 0 ? (\n              <div className=\"space-y-4\">\n                {userMappings.map((mapping: any) => (\n                  <div key={mapping.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-secondary/20 transition-colors\">\n                    <div className=\"flex items-center space-x-3\">\n                      <StatusIndicator status={mapping.isActive ? 'online' : 'offline'} />\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\">{mapping.email}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Dahua User ID: {mapping.dahuaUserId}\n                          {mapping.name && ` • ${mapping.name}`}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => deleteUserMutation.mutate(mapping.id)}\n                      disabled={deleteUserMutation.isPending}\n                      className=\"text-destructive hover:text-destructive/80\"\n                      data-testid={`button-delete-user-${mapping.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No user mappings configured</p>\n                <p className=\"text-sm mt-2\">Add your first user mapping to get started</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":9130},"client/src/components/common/status-indicator.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusIndicatorProps {\n  status: 'online' | 'offline' | 'warning';\n  className?: string;\n}\n\nexport default function StatusIndicator({ status, className }: StatusIndicatorProps) {\n  return (\n    <span\n      className={cn(\n        \"status-indicator\",\n        {\n          \"status-online\": status === 'online',\n          \"status-offline\": status === 'offline',\n          \"status-warning\": status === 'warning',\n        },\n        className\n      )}\n    />\n  );\n}\n","size_bytes":504},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { UserCheck, DoorOpen, Ban, Building } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function MetricsCards() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i} className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Today's Access Attempts\",\n      value: metrics?.totalAttempts || 0,\n      subtitle: `${metrics?.totalAttempts > 0 ? '+' : ''}${metrics?.totalAttempts || 0} from yesterday`,\n      icon: UserCheck,\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n    },\n    {\n      title: \"Successful Access\",\n      value: metrics?.successfulAccess || 0,\n      subtitle: `${metrics?.successRate || 0}% success rate`,\n      icon: DoorOpen,\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n    },\n    {\n      title: \"Denied Access\",\n      value: metrics?.deniedAccess || 0,\n      subtitle: \"No valid booking\",\n      icon: Ban,\n      color: \"text-destructive\",\n      bgColor: \"bg-destructive/10\",\n    },\n    {\n      title: \"Active Rooms\",\n      value: metrics?.activeRooms || 0,\n      subtitle: `of ${metrics?.totalRooms || 0} monitored`,\n      icon: Building,\n      color: \"text-chart-2\",\n      bgColor: \"bg-chart-2/10\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card, index) => {\n        const Icon = card.icon;\n        return (\n          <Card key={index} className=\"card-hover\" data-testid={`metric-card-${index}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                  <p className=\"text-3xl font-bold text-foreground\">{card.value}</p>\n                  <p className={`text-sm ${card.color}`}>{card.subtitle}</p>\n                </div>\n                <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`${card.color} text-xl`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2890},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Zap, Network, Play, UserPlus, FileText, ChevronRight } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function QuickActions() {\n  const { toast } = useToast();\n\n  const testConnectionMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/connection\"),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Connection Test\",\n        description: result.success ? \"All systems connected successfully\" : \"Some connections failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Connection Test Failed\",\n        description: \"Unable to test system connections\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const simulateEventMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/event\", {\n      code: \"FaceRecognition\",\n      action: \"Start\",\n      index: 1,\n      data: { UserID: \"12345\", Door: 1 }\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Event Simulation\",\n        description: result.success ? \"Face recognition event simulated successfully\" : \"Event simulation failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Simulation Failed\",\n        description: \"Unable to simulate face recognition event\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const actions = [\n    {\n      title: \"Test System Connection\",\n      description: \"Verify all services are operational\",\n      icon: Network,\n      color: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n      onClick: () => testConnectionMutation.mutate(),\n      loading: testConnectionMutation.isPending,\n      testId: \"action-test-connection\"\n    },\n    {\n      title: \"Simulate Face Recognition\",\n      description: \"Test webhook with sample data\",\n      icon: Play,\n      color: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      onClick: () => simulateEventMutation.mutate(),\n      loading: simulateEventMutation.isPending,\n      testId: \"action-simulate-event\"\n    },\n    {\n      title: \"Add User Mapping\",\n      description: \"Map new Dahua user to email\",\n      icon: UserPlus,\n      color: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      href: \"/user-mappings\",\n      testId: \"action-add-user\"\n    },\n    {\n      title: \"Export Access Logs\",\n      description: \"Download activity reports\",\n      icon: FileText,\n      color: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      href: \"/access-logs\",\n      testId: \"action-export-logs\"\n    }\n  ];\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-border\">\n        <CardTitle className=\"flex items-center\">\n          <Zap className=\"mr-2 text-primary\" />\n          Quick Actions\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6 space-y-4\">\n        {actions.map((action, index) => {\n          const Icon = action.icon;\n          \n          if (action.href) {\n            return (\n              <Link key={index} href={action.href}>\n                <Button \n                  className={`w-full flex items-center justify-between p-4 h-auto ${action.color}`}\n                  data-testid={action.testId}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Icon className=\"w-5 h-5\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-medium\">{action.title}</div>\n                      <div className=\"text-sm opacity-80\">{action.description}</div>\n                    </div>\n                  </div>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </Link>\n            );\n          }\n\n          return (\n            <Button\n              key={index}\n              className={`w-full flex items-center justify-between p-4 h-auto ${action.color}`}\n              onClick={action.onClick}\n              disabled={action.loading}\n              data-testid={action.testId}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Icon className=\"w-5 h-5\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">{action.title}</div>\n                  <div className=\"text-sm opacity-80\">{action.description}</div>\n                </div>\n              </div>\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4986},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, Check, X } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function RecentActivity() {\n  const { data: accessLogs, isLoading } = useQuery({\n    queryKey: [\"/api/access-logs\"],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader className=\"border-b border-border\">\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"mr-2 text-primary\" />\n            Recent Access Events\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4 p-3 bg-secondary/50 rounded-lg animate-pulse\">\n                <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"h-3 bg-muted rounded w-16 mb-2\"></div>\n                  <div className=\"h-6 bg-muted rounded w-20\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const recentLogs = accessLogs?.slice(0, 5) || [];\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-border\">\n        <CardTitle className=\"flex items-center\">\n          <Clock className=\"mr-2 text-primary\" />\n          Recent Access Events\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {recentLogs.length > 0 ? (\n            recentLogs.map((log: any) => (\n              <div key={log.id} className=\"flex items-center space-x-4 p-3 bg-secondary/50 rounded-lg\">\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                  log.accessGranted ? 'bg-accent' : 'bg-destructive'\n                }`}>\n                  {log.accessGranted ? (\n                    <Check className=\"text-accent-foreground text-sm\" />\n                  ) : (\n                    <X className=\"text-destructive-foreground text-sm\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {log.userEmail || `User ID: ${log.dahuaUserId}`}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {log.roomEmail ? log.roomEmail.split('@')[0] : `Door ${log.doorChannel}`} • {log.eventType}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    {log.timestamp ? format(new Date(log.timestamp), 'h:mm a') : 'Unknown'}\n                  </p>\n                  <Badge \n                    variant={log.accessGranted ? \"default\" : \"destructive\"}\n                    className=\"text-xs\"\n                  >\n                    {log.accessGranted ? 'Granted' : 'Denied'}\n                  </Badge>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <p>No recent access events</p>\n            </div>\n          )}\n        </div>\n        <Link href=\"/access-logs\">\n          <Button variant=\"ghost\" className=\"w-full mt-4 text-primary hover:text-primary/80\">\n            View All Events →\n          </Button>\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3998},"client/src/components/dashboard/room-mappings-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DoorOpen, Plus, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StatusIndicator from \"@/components/common/status-indicator\";\nimport { Link } from \"wouter\";\n\nexport default function RoomMappingsWidget() {\n  const { toast } = useToast();\n  \n  const { data: roomMappings, isLoading } = useQuery({\n    queryKey: [\"/api/room-mappings\"],\n    refetchInterval: 60000,\n  });\n\n  const deleteRoomMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/room-mappings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-mappings\"] });\n      toast({\n        title: \"Room Removed\",\n        description: \"Room mapping deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Unable to delete room mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <DoorOpen className=\"mr-2 text-primary\" />\n              Room Mappings\n            </CardTitle>\n            <div className=\"h-8 w-20 bg-muted rounded animate-pulse\"></div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-3\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg animate-pulse\">\n                <div>\n                  <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-24\"></div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                  <div className=\"w-4 h-4 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const mappings = roomMappings || [];\n  const getRandomStatus = (index: number) => {\n    // Simulate different statuses for visual variety\n    return index === 2 ? 'warning' : 'online';\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <DoorOpen className=\"mr-2 text-primary\" />\n            Room Mappings\n          </CardTitle>\n          <Link href=\"/room-mappings\">\n            <Button size=\"sm\" data-testid=\"button-add-room\">\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add Room\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {mappings.length > 0 ? (\n            mappings.map((mapping: any, index: number) => (\n              <div key={mapping.id} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {mapping.roomName || mapping.roomEmail}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">Door/Channel: {mapping.doorChannel}</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <StatusIndicator status={mapping.isActive ? getRandomStatus(index) : 'offline'} />\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => deleteRoomMutation.mutate(mapping.id)}\n                    disabled={deleteRoomMutation.isPending}\n                    className=\"text-destructive hover:text-destructive/80 p-1\"\n                    data-testid={`button-remove-room-${mapping.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"flex items-center justify-center p-6 border-2 border-dashed border-border rounded-lg\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">No rooms mapped</p>\n                <Link href=\"/room-mappings\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-primary hover:text-primary/80 mt-1\">\n                    Add your first room mapping\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5017},"client/src/components/dashboard/test-interface.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FlaskConical, Globe, Calendar, Heart } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function TestInterface() {\n  const { toast } = useToast();\n  \n  // Webhook test state\n  const [webhookUserId, setWebhookUserId] = useState(\"12345\");\n  const [webhookDoor, setWebhookDoor] = useState(\"1\");\n  \n  // Calendar test state\n  const [calendarUserEmail, setCalendarUserEmail] = useState(\"aziz@elrace.com\");\n  const [calendarRoomEmail, setCalendarRoomEmail] = useState(\"Room1@elrace.com\");\n\n  const { data: roomMappings } = useQuery({\n    queryKey: [\"/api/room-mappings\"]\n  });\n\n  const { data: healthData } = useQuery({\n    queryKey: [\"/api/health\"],\n    refetchInterval: 30000,\n  });\n\n  const testWebhookMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/event\", {\n      code: \"FaceRecognition\",\n      action: \"Start\",\n      index: parseInt(webhookDoor),\n      data: { UserID: webhookUserId, Door: parseInt(webhookDoor) }\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Webhook Test\",\n        description: result.success ? \"Event processed successfully\" : \"Event processing failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Webhook Test Failed\",\n        description: \"Unable to send test event\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const testCalendarMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/calendar\", {\n      userEmail: calendarUserEmail,\n      roomEmail: calendarRoomEmail\n    }),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Calendar Test\",\n        description: result.success ? \"Calendar check completed\" : \"Calendar check failed\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Calendar Test Failed\",\n        description: \"Unable to test calendar integration\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const runHealthCheckMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/test/connection\"),\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Health Check\",\n        description: result.success ? \"All systems healthy\" : \"Some systems have issues\",\n        variant: result.success ? \"default\" : \"destructive\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Health Check Failed\",\n        description: \"Unable to perform health check\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const rooms = roomMappings || [];\n\n  return (\n    <div className=\"mt-8\">\n      <div className=\"gradient-border\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <FlaskConical className=\"mr-2 text-primary\" />\n                Test Interface\n              </CardTitle>\n              <Badge variant=\"secondary\" className=\"bg-accent/10 text-accent\">\n                Development Mode\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* Test Webhook */}\n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                  <Globe className=\"mr-2 text-primary text-sm\" />\n                  Test Webhook\n                </h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"webhook-user-id\" className=\"text-xs text-muted-foreground\">\n                      User ID\n                    </Label>\n                    <Input\n                      id=\"webhook-user-id\"\n                      value={webhookUserId}\n                      onChange={(e) => setWebhookUserId(e.target.value)}\n                      className=\"text-sm\"\n                      data-testid=\"input-webhook-user-id\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"webhook-door\" className=\"text-xs text-muted-foreground\">\n                      Door/Channel\n                    </Label>\n                    <Select value={webhookDoor} onValueChange={setWebhookDoor}>\n                      <SelectTrigger data-testid=\"select-webhook-door\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {rooms.map((room: any) => (\n                          <SelectItem key={room.doorChannel} value={room.doorChannel.toString()}>\n                            {room.doorChannel} - {room.roomName || room.roomEmail}\n                          </SelectItem>\n                        ))}\n                        <SelectItem value=\"1\">1</SelectItem>\n                        <SelectItem value=\"2\">2</SelectItem>\n                        <SelectItem value=\"3\">3</SelectItem>\n                        <SelectItem value=\"4\">4</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button\n                    onClick={() => testWebhookMutation.mutate()}\n                    disabled={testWebhookMutation.isPending}\n                    className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                    data-testid=\"button-test-webhook\"\n                  >\n                    {testWebhookMutation.isPending ? \"Sending...\" : \"Send Test Event\"}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Test Calendar */}\n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                  <Calendar className=\"mr-2 text-accent text-sm\" />\n                  Test Calendar\n                </h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"calendar-user-email\" className=\"text-xs text-muted-foreground\">\n                      User Email\n                    </Label>\n                    <Input\n                      id=\"calendar-user-email\"\n                      type=\"email\"\n                      value={calendarUserEmail}\n                      onChange={(e) => setCalendarUserEmail(e.target.value)}\n                      className=\"text-sm\"\n                      data-testid=\"input-calendar-user-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"calendar-room-email\" className=\"text-xs text-muted-foreground\">\n                      Room Email\n                    </Label>\n                    <Select value={calendarRoomEmail} onValueChange={setCalendarRoomEmail}>\n                      <SelectTrigger data-testid=\"select-calendar-room-email\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {rooms.map((room: any) => (\n                          <SelectItem key={room.id} value={room.roomEmail}>\n                            {room.roomName || room.roomEmail}\n                          </SelectItem>\n                        ))}\n                        <SelectItem value=\"Room1@elrace.com\">Room1@elrace.com</SelectItem>\n                        <SelectItem value=\"Room2@elrace.com\">Room2@elrace.com</SelectItem>\n                        <SelectItem value=\"Room3@elrace.com\">Room3@elrace.com</SelectItem>\n                        <SelectItem value=\"Room4@elrace.com\">Room4@elrace.com</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button\n                    onClick={() => testCalendarMutation.mutate()}\n                    disabled={testCalendarMutation.isPending}\n                    className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\"\n                    data-testid=\"button-test-calendar\"\n                  >\n                    {testCalendarMutation.isPending ? \"Testing...\" : \"Test Calendar\"}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Health Check */}\n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                  <Heart className=\"mr-2 text-chart-2 text-sm\" />\n                  Health Check\n                </h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">Server Status</span>\n                    <span className=\"text-xs text-accent\">\n                      {healthData?.status === 'healthy' ? 'Healthy' : 'Unhealthy'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">Last Check</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {healthData?.timestamp ? new Date(healthData.timestamp).toLocaleTimeString() : 'Unknown'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">Environment</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {healthData?.environment?.node_env || 'Unknown'}\n                    </span>\n                  </div>\n                  <Button\n                    onClick={() => runHealthCheckMutation.mutate()}\n                    disabled={runHealthCheckMutation.isPending}\n                    className=\"w-full bg-chart-2 text-primary-foreground hover:bg-chart-2/90\"\n                    data-testid=\"button-run-health-check\"\n                  >\n                    {runHealthCheckMutation.isPending ? \"Checking...\" : \"Run Health Check\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10959},"client/src/components/dashboard/user-mappings-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Plus, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StatusIndicator from \"@/components/common/status-indicator\";\nimport { Link } from \"wouter\";\n\nexport default function UserMappingsWidget() {\n  const { toast } = useToast();\n  \n  const { data: userMappings, isLoading } = useQuery({\n    queryKey: [\"/api/user-mappings\"],\n    refetchInterval: 60000,\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/user-mappings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-mappings\"] });\n      toast({\n        title: \"User Removed\",\n        description: \"User mapping deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Unable to delete user mapping\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"mr-2 text-primary\" />\n              User Mappings\n            </CardTitle>\n            <div className=\"h-8 w-20 bg-muted rounded animate-pulse\"></div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-3\">\n            {Array.from({ length: 2 }).map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg animate-pulse\">\n                <div>\n                  <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-24\"></div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                  <div className=\"w-4 h-4 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const mappings = userMappings || [];\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"mr-2 text-primary\" />\n            User Mappings\n          </CardTitle>\n          <Link href=\"/user-mappings\">\n            <Button size=\"sm\" data-testid=\"button-add-user\">\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add User\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {mappings.length > 0 ? (\n            mappings.slice(0, 3).map((mapping: any) => (\n              <div key={mapping.id} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">{mapping.email}</p>\n                  <p className=\"text-xs text-muted-foreground\">User ID: {mapping.dahuaUserId}</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <StatusIndicator status={mapping.isActive ? 'online' : 'offline'} />\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => deleteUserMutation.mutate(mapping.id)}\n                    disabled={deleteUserMutation.isPending}\n                    className=\"text-destructive hover:text-destructive/80 p-1\"\n                    data-testid={`button-remove-user-${mapping.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"flex items-center justify-center p-6 border-2 border-dashed border-border rounded-lg\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">No users mapped</p>\n                <Link href=\"/user-mappings\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-primary hover:text-primary/80 mt-1\">\n                    Add your first user mapping\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n          {mappings.length > 3 && (\n            <Link href=\"/user-mappings\">\n              <Button variant=\"ghost\" className=\"w-full text-sm text-primary hover:text-primary/80\">\n                View All Users ({mappings.length})\n              </Button>\n            </Link>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5055},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Shield, Activity, Users, DoorOpen, Settings, FlaskConical } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport StatusIndicator from \"@/components/common/status-indicator\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Activity },\n  { name: \"Access Logs\", href: \"/access-logs\", icon: Activity },\n  { name: \"User Mappings\", href: \"/user-mappings\", icon: Users },\n  { name: \"Room Mappings\", href: \"/room-mappings\", icon: DoorOpen },\n  { name: \"Configuration\", href: \"/configuration\", icon: Settings },\n  { name: \"Test Endpoints\", href: \"/test-endpoints\", icon: FlaskConical },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const { data: systemHealth } = useQuery({\n    queryKey: [\"/api/system-health\"],\n    refetchInterval: 30000,\n  });\n\n  const getServiceStatus = (serviceName: string) => {\n    if (!systemHealth || !Array.isArray(systemHealth)) return 'offline';\n    const service = systemHealth.find((s: any) => s.service === serviceName);\n    return service?.status || 'offline';\n  };\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\">\n      {/* Logo/Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Shield className=\"text-primary-foreground text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\">Access Control</h1>\n            <p className=\"text-xs text-muted-foreground\">Middleware Dashboard</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-secondary\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.name}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* System Status */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Dahua Connection</span>\n            <div className=\"flex items-center\">\n              <StatusIndicator status={getServiceStatus('dahua')} />\n              <span className={cn(\n                \"text-xs\",\n                getServiceStatus('dahua') === 'online' ? \"text-accent\" : \"text-destructive\"\n              )}>\n                {getServiceStatus('dahua') === 'online' ? 'Online' : 'Offline'}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Microsoft Graph</span>\n            <div className=\"flex items-center\">\n              <StatusIndicator status={getServiceStatus('microsoft-graph')} />\n              <span className={cn(\n                \"text-xs\",\n                getServiceStatus('microsoft-graph') === 'online' ? \"text-accent\" : \"text-destructive\"\n              )}>\n                {getServiceStatus('microsoft-graph') === 'online' ? 'Connected' : 'Disconnected'}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Server Health</span>\n            <div className=\"flex items-center\">\n              <StatusIndicator status={getServiceStatus('server')} />\n              <span className={cn(\n                \"text-xs\",\n                getServiceStatus('server') === 'online' ? \"text-accent\" : \"text-destructive\"\n              )}>\n                {getServiceStatus('server') === 'online' ? 'Healthy' : 'Unhealthy'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4584},"client/src/components/layout/topbar.tsx":{"content":"import { RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface TopbarProps {\n  title: string;\n  description: string;\n}\n\nexport default function Topbar({ title, description }: TopbarProps) {\n  const handleRefresh = () => {\n    queryClient.invalidateQueries();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">{title}</h1>\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-accent rounded-full pulse-animation\"></div>\n            <span className=\"text-sm text-muted-foreground\">Live Monitoring</span>\n          </div>\n          <Button\n            onClick={handleRefresh}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-refresh\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            <span>Refresh</span>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1268},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}